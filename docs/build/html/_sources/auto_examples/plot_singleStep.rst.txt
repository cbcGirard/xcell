
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_singleStep.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_singleStep.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_singleStep.py:


Single timestep
=====================

Illustrates setting up a simulation and solving at a single time step

.. GENERATED FROM PYTHON SOURCE LINES 10-16

.. code-block:: default


    import numpy as np
    import xcell
    import matplotlib.pyplot as plt









.. GENERATED FROM PYTHON SOURCE LINES 17-18

Simulation preferences

.. GENERATED FROM PYTHON SOURCE LINES 18-39

.. code-block:: default


    # Misc parameters
    xcell.colors.useLightStyle()
    studyPath = '/dev/null'

    # options = uniform, adaptive
    meshtype = 'adaptive'

    maxdepth = 10  # Maximum successive splits allowed for octree mesh
    nX = 10  # Number of elements along an axis for a uniform mesh

    # options: Admittance, Face, FEM
    elementType = 'Admittance'
    dual = True
    regularize = False

    # options: analytical, ground
    boundaryType = 'ground'

    fixedVoltageSource = False  # otherwise, simulate current injection








.. GENERATED FROM PYTHON SOURCE LINES 40-41

Setup simulation

.. GENERATED FROM PYTHON SOURCE LINES 41-100

.. code-block:: default



    xmax = 1e-4  # domain boundary
    rElec = 1e-6  # center source radius

    sigma = np.ones(3)

    bbox = np.append(-xmax*np.ones(3), xmax*np.ones(3))
    study = xcell.SimStudy(studyPath, bbox)

    setup = study.newSimulation()
    setup.mesh.elementType = elementType
    setup.meshtype = meshtype

    if fixedVoltageSource:
        setup.addVoltageSource(xcell.signals.Signal(1), np.zeros(3), rElec)
        srcMag = 1.
        srcType = 'Voltage'
    else:
        srcMag = 4*np.pi*sigma[0]*rElec
        setup.addCurrentSource(xcell.signals.Signal(srcMag), np.zeros(3), rElec)
        srcType = 'Current'

    if meshtype == 'uniform':
        setup.makeUniformGrid(nX)
        print('uniform, %d per axis' % nX)
    else:
        setup.makeAdaptiveGrid(refPts=np.zeros((1, 3)),
                               maxdepth=np.array(maxdepth, ndmin=1),
                               minl0Function=xcell.generalMetric,
                               # coefs=np.array(2**(-0.2*maxdepth), ndmin=1))
                               coefs=np.array(0.2, ndmin=1))

    if boundaryType == 'analytical':
        boundaryFun = None
    else:
        def boundaryFun(coord):
            r = np.linalg.norm(coord)
            return rElec/(r*np.pi*4)


    setup.finalizeMesh()

    setup.setBoundaryNodes(boundaryFun, sigma=1)

    v = setup.iterativeSolve(None, 1e-9)
    setup.applyTransforms()


    setup.getMemUsage(True)
    setup.printTotalTime()

    setup.startTiming('Estimate error')
    # srcMag,srcType,showPlots=showGraphs)
    errEst, arErr, _, _, _ = setup.calculateErrors()
    print('error: %g' % errEst)
    setup.logTime()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    898.777 Mb used
            Total time: 12.6203s [CPU], 5.42217s [Wall]
    error: 0.217408




.. GENERATED FROM PYTHON SOURCE LINES 101-105

SliceViewer
----------------------
Interactive slice viewer (use arrow keys to change location within ipython session)


.. GENERATED FROM PYTHON SOURCE LINES 105-108

.. code-block:: default


    sv = xcell.visualizers.SliceViewer(axis=None, sim=setup)




.. image-sg:: /auto_examples/images/sphx_glr_plot_singleStep_001.png
   :alt: z=0
   :srcset: /auto_examples/images/sphx_glr_plot_singleStep_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 109-110

2d image

.. GENERATED FROM PYTHON SOURCE LINES 110-118

.. code-block:: default

    bnd = setup.mesh.bbox[[0, 3, 2, 4]]

    arr, _ = setup.getValuesInPlane()
    cMap, cNorm = xcell.visualizers.getCmap(setup.nodeVoltages, forceBipolar=True)
    xcell.visualizers.patchworkImage(plt.figure().gca(),
                                     arr, cMap, cNorm,
                                     extent=bnd)




.. image-sg:: /auto_examples/images/sphx_glr_plot_singleStep_002.png
   :alt: plot singleStep
   :srcset: /auto_examples/images/sphx_glr_plot_singleStep_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<matplotlib.image.AxesImage object at 0x7f9ff04ea130>, <matplotlib.image.AxesImage object at 0x7f9ff04ea730>, <matplotlib.image.AxesImage object at 0x7f9ff04eac70>, <matplotlib.image.AxesImage object at 0x7f9ff04ea490>, <matplotlib.image.AxesImage object at 0x7f9ff04ead30>, <matplotlib.image.AxesImage object at 0x7f9ff04ee070>, <matplotlib.image.AxesImage object at 0x7f9ff04eea30>]



.. GENERATED FROM PYTHON SOURCE LINES 120-134

.. code-block:: default


    ax = plt.figure().add_subplot()
    xcell.visualizers.formatXYAxis(ax, bnd)
    arr = xcell.visualizers.resamplePlane(ax, setup)

    cMap, cNorm = xcell.visualizers.getCmap(arr.ravel(), forceBipolar=True)
    xcell.visualizers.patchworkImage(ax,
                                     [arr], cMap, cNorm,
                                     extent=bnd)

    _, _, edgePoints = setup.getElementsInPlane()
    xcell.visualizers.showEdges2d(ax, edgePoints)





.. image-sg:: /auto_examples/images/sphx_glr_plot_singleStep_003.png
   :alt: plot singleStep
   :srcset: /auto_examples/images/sphx_glr_plot_singleStep_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.LineCollection object at 0x7f9ff05603d0>



.. GENERATED FROM PYTHON SOURCE LINES 135-136

TOPOLOGY/connectivity

.. GENERATED FROM PYTHON SOURCE LINES 136-158

.. code-block:: default

    ax = xcell.visualizers.showMesh(setup)
    ax.set_xticks([])
    ax.set_yticks([])
    ax.set_zticks([])
    ghost = (.0, .0, .0, 0.0)
    ax.xaxis.set_pane_color(ghost)
    ax.yaxis.set_pane_color(ghost)
    ax.zaxis.set_pane_color(ghost)


    xcell.visualizers.showEdges(ax,
                                setup.mesh.nodeCoords,
                                setup.edges,
                                setup.conductances)

    bnodes = setup.mesh.getBoundaryNodes()
    xcell.visualizers.showNodes3d(ax,
                                  setup.mesh.nodeCoords[bnodes],
                                  nodeVals=np.ones_like(bnodes),
                                  colors='r')





.. image-sg:: /auto_examples/images/sphx_glr_plot_singleStep_004.png
   :alt: plot singleStep
   :srcset: /auto_examples/images/sphx_glr_plot_singleStep_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <mpl_toolkits.mplot3d.art3d.Path3DCollection object at 0x7f9ff0499ee0>



.. GENERATED FROM PYTHON SOURCE LINES 159-162

SliceSet
--------------------


.. GENERATED FROM PYTHON SOURCE LINES 162-168

.. code-block:: default


    # sphinx_gallery_thumbnail_number = 5
    img = xcell.visualizers.SliceSet(plt.figure(), study)
    img.addSimulationData(setup, append=True)
    img.getArtists(0)




.. image-sg:: /auto_examples/images/sphx_glr_plot_singleStep_005.png
   :alt: Simulated potential [V], Absolute error [V]
   :srcset: /auto_examples/images/sphx_glr_plot_singleStep_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<matplotlib.image.AxesImage object at 0x7f9f9f3fd910>, <matplotlib.image.AxesImage object at 0x7f9f9f3fdc10>, <matplotlib.image.AxesImage object at 0x7f9f9f3fdeb0>, <matplotlib.image.AxesImage object at 0x7f9f7f38e1f0>, <matplotlib.collections.LineCollection object at 0x7f9f7f38e250>, <matplotlib.collections.LineCollection object at 0x7f9fb5da8fa0>, <matplotlib.collections.LineCollection object at 0x7f9fb5dba4f0>, <matplotlib.collections.LineCollection object at 0x7f9fb5a18460>, <matplotlib.collections.LineCollection object at 0x7f9fb5a23910>, <matplotlib.collections.LineCollection object at 0x7f9fb5681880>, <matplotlib.collections.LineCollection object at 0x7f9fb568bd30>, <matplotlib.collections.LineCollection object at 0x7f9fb536aca0>]



.. GENERATED FROM PYTHON SOURCE LINES 169-172

ErrorGraph
------------------


.. GENERATED FROM PYTHON SOURCE LINES 172-179

.. code-block:: default


    ptr = xcell.visualizers.ErrorGraph(plt.figure(), study)
    ptr.prefs['universalPts'] = True
    pdata = ptr.addSimulationData(setup)
    ptr.getArtists(0, pdata)





.. image-sg:: /auto_examples/images/sphx_glr_plot_singleStep_006.png
   :alt: plot singleStep
   :srcset: /auto_examples/images/sphx_glr_plot_singleStep_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<matplotlib.collections.PathCollection object at 0x7f9fb51d8550>, <matplotlib.lines.Line2D object at 0x7f9fb51e6340>, <matplotlib.collections.PathCollection object at 0x7f9fb51e6fd0>, <matplotlib.collections.PolyCollection object at 0x7f9fb51e6f40>]



.. GENERATED FROM PYTHON SOURCE LINES 180-183

LogError
-----------


.. GENERATED FROM PYTHON SOURCE LINES 183-187

.. code-block:: default


    P = xcell.visualizers.LogError(None, study)
    P.addSimulationData(setup, True)
    P.getArtists(0)



.. image-sg:: /auto_examples/images/sphx_glr_plot_singleStep_007.png
   :alt: plot singleStep
   :srcset: /auto_examples/images/sphx_glr_plot_singleStep_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<matplotlib.lines.Line2D object at 0x7f9fb5070310>, <matplotlib.lines.Line2D object at 0x7f9fb5070490>, Text(0.5, 0.95, 'FVU=0.016, int1=0.22, 587 points in source')]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  37.492 seconds)


.. _sphx_glr_download_auto_examples_plot_singleStep.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_singleStep.py <plot_singleStep.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_singleStep.ipynb <plot_singleStep.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
