
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/Geometry/brainmod.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_Geometry_brainmod.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_Geometry_brainmod.py:


Created on Thu Apr 20 17:27:58 2023

@author: benoit

.. GENERATED FROM PYTHON SOURCE LINES 8-44

.. code-block:: default



    import numpy as np
    # import xcell
    import pyvista as pv
    from scipy.spatial import ConvexHull

    stl = pv.read('fullbrain_oriented.stl')
    result = pv.read('xcell2-11.vtk')

    stl.rotate_x(90., inplace=True)
    # pv.set_jupyter_backend(None)

    pts = stl.points
    ax = 2

    bbox = np.hstack((np.min(pts, axis=0),
                      np.max(pts, axis=0)))
    xmax = np.max(np.abs(bbox))*1.5


    moldbb = stl.bounds+2*np.sign(stl.bounds)

    box = pv.Box(bounds=moldbb, quads=False, level=10)

    # adapted from https://gist.github.com/flutefreak7/bd621a9a836c8224e92305980ed829b9


    def hull(mesh):
        hull = ConvexHull(np.array(mesh.points))
        faces = np.column_stack(
            (3*np.ones((len(hull.simplices), 1), dtype=int), hull.simplices)).flatten()
        poly = pv.PolyData(hull.points, faces)
        return poly



.. GENERATED FROM PYTHON SOURCE LINES 45-51

.. code-block:: default

    k = [0.8, 0.6, 0.9]
    dx = [0, -5, 0.]
    p = pv.Plotter()
    p.add_mesh(lhh.scale(k).translate(dx), color='red', opacity=0.8)
    p.add_mesh(lh)
    p.show()

.. GENERATED FROM PYTHON SOURCE LINES 52-60

.. code-block:: default



    maxdist = 15.
    hl = hull(stl)
    dst = stl.compute_implicit_distance(hl)
    ok = dst.clip_scalar(value=maxdist).clip_scalar(value=-maxdist, invert=False)

    ok.extract_largest().plot()

.. GENERATED FROM PYTHON SOURCE LINES 61-73

.. code-block:: default

    scale = [0.8, 0.8, 0.4]
    slide = [0, 0, -5.]

    inside = hl.scale(scale).translate(slide)
    simple = stl.boolean_union(inside, progress_bar=True)

    simple.plot()
    # p=pv.Plotter()
    # p.add_mesh(inside,color='red')
    # p.add_mesh(stl,opacity=0.5,color='blue')
    # p.show()


.. GENERATED FROM PYTHON SOURCE LINES 74-83

.. code-block:: default

    moldbb = 2*np.sign(result.bounds)+np.array(result.bounds)
    lbound = moldbb.copy()
    rbound = moldbb.copy()
    lbound[3] = 0
    rbound[2] = 0

    tribrain = result.extract_surface().triangulate()
    lmold = pv.Box(lbound, quads=False).boolean_difference(tribrain)


.. GENERATED FROM PYTHON SOURCE LINES 84-100

.. code-block:: default


    vols = result.compute_cell_sizes(volume=True)
    vol = vols['Volume']
    depths = (np.log2(vol/min(vol))/3).astype(int)

    result.cell_data['depth'] = depths

    submeshes = []
    for d in np.unique(depths):
        sel = depths == d

        sub = result.copy()
        sub.cell_data['sel'] = sel
        submeshes.append(sub.threshold(scalars='sel', value=0.5))




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_Geometry_brainmod.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: brainmod.py <brainmod.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: brainmod.ipynb <brainmod.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
