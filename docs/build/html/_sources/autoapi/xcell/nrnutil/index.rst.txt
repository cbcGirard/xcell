:py:mod:`xcell.nrnutil`
=======================

.. py:module:: xcell.nrnutil

.. autoapi-nested-parse::

   Utilities for interfacing with NEURON.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   xcell.nrnutil.LineDataUnits
   xcell.nrnutil.ThresholdSim
   xcell.nrnutil.ThresholdStudy
   xcell.nrnutil.RecordedCell



Functions
~~~~~~~~~

.. autoapisummary::

   xcell.nrnutil.setVext
   xcell.nrnutil.returnSegmentCoordinates
   xcell.nrnutil.getNeuronGeometry
   xcell.nrnutil.getMembraneCurrents
   xcell.nrnutil.showCellGeo
   xcell.nrnutil.getCellImage
   xcell.nrnutil.makeBiphasicPulse
   xcell.nrnutil.makeMonophasicPulse
   xcell.nrnutil.makeInterface



.. py:function:: setVext(vext, vstim, tstim)


.. py:function:: returnSegmentCoordinates(section, inMicrons=False)

   Get geometry info at segment centers.

   Adapted from https://www.neuron.yale.edu/phpBB/viewtopic.php?p=19176#p19176

   Modified to give segment radius as well

   :param section: The section to return info about.
   :type section: NEURON section
   :param inMicrons: Whether to return values in microns (NEURON default)
                     or in meters (xcell default)
   :type inMicrons: bool, default False

   :returns: * **xCoord** (*float*) -- x coordinate.
             * **yCoord** (*float*) -- y coordinate.
             * **zCoord** (*float*) -- z coordinate.
             * **rads** (*float*) -- radius of segment


.. py:function:: getNeuronGeometry()

   Get geometric info of all compartments.

   :returns: * **coords** (*float[:,3]*) -- Cartesian coordinates of compartment centers.
             * **rads** (*float[:]*) -- Radius of each compatment.
             * **isSphere** (*bool[:]*) -- Whether compartment is assumed to represent a sphere.


.. py:function:: getMembraneCurrents()

   Record total membrane current of every compartment.

   :returns: **ivecs** -- List of vectors of membrane current.
   :rtype: list of Vector


.. py:class:: LineDataUnits(*args, **kwargs)

   Bases: :py:obj:`matplotlib.lines.Line2D`

   Yoinked from https://stackoverflow.com/a/42972469

   .. py:attribute:: _linewidth

      

   .. py:method:: _get_lw()


   .. py:method:: _set_lw(lw)



.. py:function:: showCellGeo(axis, polys=None, showNodes=False)

   Add cell geometry to designated plot.

   :param axis: Axis to plot on.
   :type axis: matplotlib axis
   :param polys: DESCRIPTION. The default is None, which queries NEURON for all compartments.
   :type polys: List of M x 2 arrays, optional

   :returns: **polys** -- DESCRIPTION.
   :rtype: TYPE


.. py:function:: getCellImage()

   Get plottable representation of cell geometry.

   :returns: **polys** -- List of vertices for creating a PolyCollection.
   :rtype: List of M x 2 arrays


.. py:function:: makeBiphasicPulse(amplitude, tstart, pulsedur, trise=None)

   Create pair of Vectors for biphasic (positive first) stimulus.

   :param amplitude: Amplitude of pulse in amperes.
   :type amplitude: float
   :param tstart: Delay before stimulus begins in ms.
   :type tstart: float
   :param pulsedur: Duration of float in ms.
   :type pulsedur: float
   :param trise: DESCRIPTION. Set to pulsedur/1000 if None.
   :type trise: TYPE, optional

   :returns: * **stimTvec** (*Vector*) -- Times at which stimulus is specified.
             * **stimVvec** (*Vector*) -- Amplitudes stimulus takes on.


.. py:function:: makeMonophasicPulse(amplitude, tstart, pulsedur, trise=None)

   Create pair of Vectors for monophasic stimulus.

   :param amplitude: Amplitude of pulse in amperes.
   :type amplitude: float
   :param tstart: Delay before stimulus begins in ms.
   :type tstart: float
   :param pulsedur: Duration of float in ms.
   :type pulsedur: float
   :param trise: DESCRIPTION. Set to pulsedur/1000 if None.
   :type trise: TYPE, optional

   :returns: * **stimTvec** (*Vector*) -- Times at which stimulus is specified.
             * **stimVvec** (*Vector*) -- Amplitudes stimulus takes on.


.. py:function:: makeInterface()

   Add extracellular mechanism to join NEURON and xcell.

   :returns: **float[** -- Coordinates of compartment centers in meters.
   :rtype: ,3]


.. py:class:: ThresholdSim(name, xdom, srcAmps, srcGeometry, sigma=1.0)

   Bases: :py:obj:`xcell.xCell.Simulation`

   .. py:method:: meshAndSolve(depth)


   .. py:method:: getAnalyticVals(coords)



.. py:class:: ThresholdStudy(simulation, pulsedur=1.0, biphasic=True, viz=None)

   .. py:method:: _buildNeuron()


   .. py:method:: getThreshold(depth, pmin=0, pmax=100.0, analytic=False, strict=True)


   .. py:method:: _runTrial(amplitude, analytic=False)


   .. py:method:: _setVext(analytic=False)



.. py:class:: RecordedCell

   .. py:method:: attachSpikeDetector(section)

      Attach spike detector to section.

      :param section: Section to check for spikes.
      :type section: NEURON section

      :rtype: None.


   .. py:method:: attachMembraneRecordings(sections=None)

      Attach recorders for membrane voltage & current.

      :param sections: NEURON sections to record, or all sections if None (default)
      :type sections: TYPE, optional

      :rtype: None.



