:py:mod:`xcell.io`
==================

.. py:module:: xcell.io

.. autoapi-nested-parse::

   Converters for other meshing libraries



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   xcell.io.Regions



Functions
~~~~~~~~~

.. autoapisummary::

   xcell.io.toMeshIO
   xcell.io.toTriSurface
   xcell.io.toVTK
   xcell.io.saveVTK
   xcell.io.toEdgeMesh



Attributes
~~~~~~~~~~

.. autoapisummary::

   xcell.io.MIO_ORDER
   xcell.io.PV_BOUND_ORDER
   xcell.io.XCELL_BOUND_ORDER


.. py:data:: MIO_ORDER

   

.. py:data:: PV_BOUND_ORDER

   

.. py:data:: XCELL_BOUND_ORDER

   

.. py:function:: toMeshIO(mesh)

   Format mesh for meshio.

   :param mesh: DESCRIPTION.
   :type mesh: xcell Mesh

   :returns: **mioMesh** -- DESCRIPTION.
   :rtype: meshio Mesh


.. py:function:: toTriSurface(mesh)

   Generate surface triangulation of mesh.

   :param mesh: Input xcell mesh.
   :type mesh: xcell Mesh

   :returns: **mioMesh** -- Output triangulated mesh.
   :rtype: meshio Mesh


.. py:function:: toVTK(mesh)

   Export xcell mesh to a VTK Unstructured Grid.

   Enables faster visualizations and mesh operations via pyvista.

   :param mesh: The completed mesh.
   :type mesh: xcell Mesh

   :returns: **vMesh** -- Mesh in VTK format, for further manipulations.
   :rtype: VTK Unstructured Grid


.. py:function:: saveVTK(simulation, filestr)

   Save mesh in VTK format.

   :param simulation: DESCRIPTION.
   :type simulation: xcell Simulation
   :param filestr: Name of file.
   :type filestr: str

   :returns: **vtk** -- VTK mesh for further manipulations.
   :rtype: VTK Unstructured Grid


.. py:function:: toEdgeMesh(simulation, currents=False)


.. py:class:: Regions(*args, **kwargs)

   Bases: :py:obj:`pyvista.MultiBlock`

   A composite class to hold many data sets which can be iterated over.

   This wraps/extends the `vtkMultiBlockDataSet
   <https://vtk.org/doc/nightly/html/classvtkMultiBlockDataSet.html>`_ class
   so that we can easily plot these data sets and use the composite in a
   Pythonic manner.

   You can think of ``MultiBlock`` like a list as we
   can iterate over this data structure by index.  It has some dictionary
   features as we can also access blocks by their string name.

   .. versionchanged:: 0.36.0
      ``MultiBlock`` adheres more closely to being list like, and inherits
      from :class:`collections.abc.MutableSequence`.  Multiple nonconforming
      behaviors were removed or modified.

   .. rubric:: Examples

   >>> import pyvista as pv

   Create an empty composite dataset.

   >>> blocks = pv.MultiBlock()

   Add a dataset to the collection.

   >>> sphere = pv.Sphere()
   >>> blocks.append(sphere)

   Add a named block.

   >>> blocks["cube"] = pv.Cube()

   Instantiate from a list of objects.

   >>> data = [
   ...     pv.Sphere(center=(2, 0, 0)),
   ...     pv.Cube(center=(0, 2, 0)),
   ...     pv.Cone(),
   ... ]
   >>> blocks = pv.MultiBlock(data)
   >>> blocks.plot()

   Instantiate from a dictionary.

   >>> data = {
   ...     "cube": pv.Cube(),
   ...     "sphere": pv.Sphere(center=(2, 2, 0)),
   ... }
   >>> blocks = pv.MultiBlock(data)
   >>> blocks.plot()

   Iterate over the collection.

   >>> for name in blocks.keys():
   ...     block = blocks[name]
   ...

   >>> for block in blocks:
   ...     # Do something with each dataset
   ...     surf = block.extract_surface()
   ...

   .. py:method:: addMesh(mesh, category=None)


   .. py:method:: assignSigma(mesh, defaultSigma=1.0)


   .. py:method:: toPlane(origin=np.zeros(3), normal=[0.0, 0.0, 1.0])



