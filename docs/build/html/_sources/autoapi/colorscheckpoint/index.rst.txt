:py:mod:`colors-checkpoint`
===========================

.. py:module:: colors-checkpoint

.. autoapi-nested-parse::

   Color schemes for xcell.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   colors-checkpoint.scoopCmap
   colors-checkpoint.makeStyleDict
   colors-checkpoint.useDarkStyle
   colors-checkpoint.useLightStyle
   colors-checkpoint.setupPVtheme
   colors-checkpoint.recolorSVG



Attributes
~~~~~~~~~~

.. autoapisummary::

   colors-checkpoint.MESH_ALPHA
   colors-checkpoint.FAINT
   colors-checkpoint.CM_BIPOLAR
   colors-checkpoint.DARK
   colors-checkpoint.HILITE
   colors-checkpoint.OFFWHITE
   colors-checkpoint.NULL
   colors-checkpoint.WHITE
   colors-checkpoint.ACCENT_DARK
   colors-checkpoint.ACCENT_LIGHT
   colors-checkpoint.BASE
   colors-checkpoint.plx
   colors-checkpoint.lint
   colors-checkpoint.CM_MONO
   colors-checkpoint.scopeColors
   colors-checkpoint.scopeColorsLite
   colors-checkpoint.styleScope
   colors-checkpoint.styleScope2


.. py:data:: MESH_ALPHA
   :value: 0.25

   

.. py:data:: FAINT
   :value: ()

   

.. py:function:: scoopCmap(baseCmap, fraction=0.1)

   Fades colormap transparency as values approach 0.0.

   :param baseCmap: Colormap to modify.
   :type baseCmap: colormap
   :param fraction: Fraction of colormap range to apply alpha fade. The default is 0.1.
   :type fraction: float, optional

   :returns: **newCmap** -- Modified colormap.
   :rtype: colormap


.. py:data:: CM_BIPOLAR

   

.. py:data:: DARK
   :value: '#19232d'

   

.. py:data:: HILITE
   :value: '#afcfff'

   

.. py:data:: OFFWHITE
   :value: '#dcd4c7'

   

.. py:data:: NULL
   :value: '#00000000'

   

.. py:data:: WHITE
   :value: '#FFFFFF00'

   

.. py:data:: ACCENT_DARK
   :value: '#990000'

   

.. py:data:: ACCENT_LIGHT
   :value: '#FFCC00'

   

.. py:data:: BASE

   

.. py:data:: plx

   

.. py:data:: lint

   

.. py:data:: CM_MONO

   

.. py:data:: scopeColors
   :value: ['#ffff00', '#00ffff', '#ff00ff', '#00ff00', '#ff0000', '#0000ff', '#ff8000', '#8000ff',...

   

.. py:data:: scopeColorsLite
   :value: ['#ffcc00', '#17becf', '#e377c2', '#2ca02c', '#1c2a99', '#d62728', '#ff7f0e', '#9467bd',...

   

.. py:data:: styleScope

   

.. py:data:: styleScope2

   

.. py:function:: makeStyleDict(fgColor, bgColor)

   Generate dictionary of plotting preferences.

   :param fgColor: Color for gridlines, text, etc..
   :type fgColor: color
   :param bgColor: Color for image background.
   :type bgColor: color

   :returns: **styleDict** -- Dict of matplotlib preferences (pass to mpl.style.use()).
   :rtype: dict


.. py:function:: useDarkStyle()

   Switch to dark-mode visualizations (suitable for screen).

   :rtype: None.


.. py:function:: useLightStyle()

   Switch to light-mode visualizations (suitable for print).

   :rtype: None.


.. py:function:: setupPVtheme(theme)


.. py:function:: recolorSVG(fname, toLight=True)

   Post-process SVG to change color scheme.

   :param fname: File name.
   :type fname: str
   :param toLight: Set conversion direction from dark to light. The default is True.
   :type toLight: bool, optional

   :rtype: None.


