
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_comparisons.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_comparisons.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_comparisons.py:


Depth sweep
================

Compare performance as mesh resolution increases. Generates ch3-4 data.

.. GENERATED FROM PYTHON SOURCE LINES 9-89

.. code-block:: default


    import xcell
    import Common
    import matplotlib.pyplot as plt
    import argparse
    import numpy as np

    cli = argparse.ArgumentParser()
    cli.add_argument('--comparison', choices=['bounds', 'mesh',
                     'formula', 'bigPOC', 'fixedDisc'], default='fixedDisc')
    cli.add_argument('-p', '--plot-only',
                     help='skip simulation and use existing data', action='store_true')
    # cli.add_argument('-a','--animate',help='skip simulation and use existing data', action = 'store_true')
    # cli.add_argument('-p','--plot-only',help='skip simulation and use existing data', action = 'store_true')

    args = cli.parse_args()


    generate = True

    # plot performance info
    staticPlots = True

    depths = np.arange(3, 12)

    xtraParams = None
    xmax = 1e-4
    if args.comparison == 'mesh' or args.comparison == 'bigPOC':
        foldername = 'Quals/PoC'
        tstVals = ["adaptive", "uniform"]
        # tstVals=['adaptive','equal elements',r'equal $l_0$']
        tstCat = 'Mesh type'
    if args.comparison == 'formula' or args.comparison == 'fixedDisc':
        foldername = 'Quals/formulations'
        tstVals = ['Admittance', 'FEM', 'Face']
        tstCat = 'Element type'
    if args.comparison == 'bounds':
        foldername = 'Quals/boundaries'
        tstVals = ['Analytic', 'Ground', 'Rubik0']
        tstCat = 'Boundary'
    if args.comparison == 'testing':
        foldername = 'Quals/miniset'
        tstVals = ['adaptive', 'uniform']
        tstCat = 'Mesh type'
        generate = False
        staticPlots = False
        depths = np.arange(3, 8)

    if args.comparison == 'bigPOC':
        foldername = 'Quals/bigPOC'
        xmax = 1e-2

    if args.comparison == 'fixedDisc':
        foldername = 'Quals/fixedDisc'
        xtraParams = {'BoundaryFunction': 'Analytic'}


    # if args.comparison=='voltage':
        # tstVals=[False, True]
        # tstCat='Vsrc?'


    # generate animation(s)
    plotters = [
        xcell.visualizers.ErrorGraph,
        # xcell.visualizers.ErrorGraph,
        # xcell.visualizers.SliceSet,
        # xcell.visualizers.LogError,
        # xcell.visualizers.CurrentPlot,
    ]

    plotPrefs = [
        None,
        # {'onlyDoF':True},
        # None,
        # None,
    ]


    study, _ = Common.makeSynthStudy(foldername, xmax=xmax)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    NEURON mechanisms not found in estimsurvey/.




.. GENERATED FROM PYTHON SOURCE LINES 90-98

.. code-block:: default


    if generate and not args.plot_only:
        Common.pairedDepthSweep(study,
                                depthRange=depths,
                                testCat=tstCat,
                                testVals=tstVals,
                                overrides=xtraParams)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    120 elem
    1.3226 Gb used
    error: 1.39509
    120 elem
    1.32341 Gb used
    error: 1.38292
    120 elem
    1.32442 Gb used
    error: 1.46565
    512 elem
    1.32461 Gb used
    error: 0.711183
    512 elem
    1.32461 Gb used
    error: 0.626179
    512 elem
    1.32461 Gb used
    error: 0.766867
    736 elem
    1.32461 Gb used
    error: 0.358631
    736 elem
    1.32479 Gb used
    error: 0.350071
    736 elem
    1.32479 Gb used
    error: 0.469607
    1632 elem
    1.32479 Gb used
    error: 0.203653
    1632 elem
    1.32479 Gb used
    error: 0.504739
    1632 elem
    1.32479 Gb used
    error: 0.346672
    2976 elem
    1.32479 Gb used
    error: 0.298805
    2976 elem
    1.32524 Gb used
    error: 0.596175
    2976 elem
    1.32524 Gb used
    error: 0.440742
    5272 elem
    1.32524 Gb used
    error: 0.248566
    5272 elem
    1.32875 Gb used
    error: 0.429459
    5272 elem
    1.32875 Gb used
    error: 0.234026
    7232 elem
    1.32929 Gb used
    error: 0.239598
    7232 elem
    1.3329 Gb used
    error: 0.415435
    7232 elem
    1.3329 Gb used
    error: 0.215875
    14232 elem
    1.3329 Gb used
    error: 0.233044
    14232 elem
    1.33356 Gb used
    error: 0.368771
    14232 elem
    1.33338 Gb used
    error: 0.218464
    24536 elem
    1.33365 Gb used
    error: 0.226043
    24536 elem
    1.33784 Gb used
    error: 0.334305
    24536 elem
    1.33732 Gb used
    error: 0.21718




.. GENERATED FROM PYTHON SOURCE LINES 99-129

.. code-block:: default


    costcat = 'Error'
    # costcat='FVU'
    # xcat='l0min'

    xvalues = ['Number of elements', 'l0min', 'Total time [Wall]']
    xtags = ['numel', 'l0', 'totTime']
    if staticPlots:
        for xcat, xtag in zip(xvalues, xtags):

            xcell.visualizers.groupedScatter(study.studyPath+'/log.csv',
                                             xcat=xcat,
                                             ycat=costcat,
                                             groupcat=tstCat)
            fname = tstCat+"_"+costcat+'-vs-'+xtag
            fname.replace(' ', '_')
            nufig = plt.gcf()
            study.savePlot(nufig, fname)
            for fv in tstVals:

                fstack, fratio = xcell.visualizers.plotStudyPerformance(study,
                                                                        onlyCat=tstCat,
                                                                        onlyVal=fv)
                fstem = '_'+tstCat+str(fv)

                study.savePlot(fstack, 'Performance'+fstem)

                study.savePlot(fratio, 'Ratio'+fstem)





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_001.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_002.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_003.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_004.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_005.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_006.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_007.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_008.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_008.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_009.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_010.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_010.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_011.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_011.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_012.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_012.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_013.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_013.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_014.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_014.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_015.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_015.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_016.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_016.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_017.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_017.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_018.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_018.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_019.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_019.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_020.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_020.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_021.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_021.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/benoit/repos/xcell/xcell/visualizers.py:638: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
      fig = plt.figure()




.. GENERATED FROM PYTHON SOURCE LINES 130-161

.. code-block:: default



    for ii, p in enumerate(plotters):

        plots = []
        names = []
        ranges = None
        for fv in tstVals:
            fname = p.__name__+'_'+str(fv)
            fname.replace(' ', '_')
            plotr = p(plt.figure(), study, prefs=plotPrefs[ii])
            if 'universalPts' in plotr.prefs:
                plotr.prefs['universalPts'] = True
            if 'onlyDoF' in plotr.prefs:
                if plotr.prefs['onlyDoF']:
                    fname += '-detail'

            plotr.getStudyData(filterCategories=[tstCat],
                               filterVals=[fv])

            plots.append(plotr)
            names.append(fname)

            if ranges is not None:
                plotr.unifyScales(ranges)
            ranges = plotr.dataScales

        for plot, name in zip(plots, names):
            plot.dataScales = ranges

            plot.animateStudy(fname=name, fps=1.0)



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_022.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_022.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_023.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_023.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_comparisons_024.png
         :alt: plot comparisons
         :srcset: /auto_examples/images/sphx_glr_plot_comparisons_024.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 35 minutes  59.522 seconds)


.. _sphx_glr_download_auto_examples_plot_comparisons.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_comparisons.py <plot_comparisons.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_comparisons.ipynb <plot_comparisons.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
