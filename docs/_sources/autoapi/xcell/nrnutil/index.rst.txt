:py:mod:`xcell.nrnutil`
=======================

.. py:module:: xcell.nrnutil

.. autoapi-nested-parse::

   Utilities for interfacing with NEURON.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   xcell.nrnutil.ThresholdSim
   xcell.nrnutil.ThresholdStudy
   xcell.nrnutil.RecordedCell



Functions
~~~~~~~~~

.. autoapisummary::

   xcell.nrnutil.set_v_ext
   xcell.nrnutil.return_segment_coordinates
   xcell.nrnutil.get_neuron_geometry
   xcell.nrnutil.get_membrane_currents
   xcell.nrnutil.show_cell_geo
   xcell.nrnutil.get_cell_image
   xcell.nrnutil.make_biphasic_pulse
   xcell.nrnutil.make_monophasic_pulse
   xcell.nrnutil.make_interface



.. py:function:: set_v_ext(vext, vstim, tstim)

   Set fixed extracellular potentials at all neural compartments.

   :param vext: Vector of external voltages.
   :type vext: float[:,:]
   :param vstim: Vector of governing stimulus values.
   :type vstim: `neuron.Vector`
   :param tstim: Vector of timestamps.
   :type tstim: `neuron.Vector`

   :returns: Tuple of extracellular and intracellular potentials at all
             compartments.
   :rtype: `neuron.Vector`


.. py:function:: return_segment_coordinates(section, in_microns=False)

   Get geometry info at segment centers.

   Adapted from https://www.neuron.yale.edu/phpBB/viewtopic.php?p=19176#p19176

   Modified to give segment radius as well

   :param section: The section to return info about.
   :type section: NEURON section
   :param in_microns: Whether to return values in microns (NEURON default)
                      or in meters (xcell default)
   :type in_microns: bool, default False

   :returns: * **xCoord** (*float*) -- x coordinate.
             * **yCoord** (*float*) -- y coordinate.
             * **zCoord** (*float*) -- z coordinate.
             * **rads** (*float*) -- radius of segment


.. py:function:: get_neuron_geometry()

   Get geometric info of all compartments.

   :returns: * **coords** (*float[:,3]*) -- Cartesian coordinates of compartment centers.
             * **rads** (*float[:]*) -- Radius of each compatment.
             * **is_sphere** (*bool[:]*) -- Whether compartment is assumed to represent a sphere.


.. py:function:: get_membrane_currents()

   Record total membrane current of every compartment.

   :returns: **ivecs** -- List of vectors of membrane current.
   :rtype: list of Vector


.. py:function:: show_cell_geo(axis, polys=None, show_nodes=False)

   Add cell geometry to designated plot.

   :param axis: Axis to plot on.
   :type axis: matplotlib axis
   :param polys: Polygons to plot. The default is None,
                 which queries NEURON for all compartments.
   :type polys: List of M x 2 arrays, optional

   :returns: **polys** -- Matplotlib representation of polygons
   :rtype: List of M x 2 arrays


.. py:function:: get_cell_image()

   Get plottable representation of cell geometry.

   :returns: **polys** -- List of vertices for creating a
             `matplotlib.collections.PolyCollection`.
   :rtype: List of M x 2 arrays


.. py:function:: make_biphasic_pulse(amplitude, tstart, pulsedur, trise=None)

   Create pair of Vectors for biphasic (positive first) stimulus.

   :param amplitude: Amplitude of pulse in amperes.
   :type amplitude: float
   :param tstart: Delay before stimulus begins in ms.
   :type tstart: float
   :param pulsedur: Duration of float in ms.
   :type pulsedur: float
   :param trise: Pulse rise/fall time in ms.
                 Defaults to pulsedur/1000 if None.
   :type trise: float, optional

   :returns: * **stimTvec** (`neuron.Vector`) -- Times at which stimulus is specified.
             * **stimVvec** (`neuron.Vector`) -- Amplitudes stimulus takes on.


.. py:function:: make_monophasic_pulse(amplitude, tstart, pulsedur, trise=None)

   Create pair of Vectors for monophasic stimulus.

   :param amplitude: Amplitude of pulse in amperes.
   :type amplitude: float
   :param tstart: Delay before stimulus begins in ms.
   :type tstart: float
   :param pulsedur: Duration of float in ms.
   :type pulsedur: float
   :param trise: Pulse rise/fall time in ms.
                 Defaults to pulsedur/1000 if None.
   :type trise: float, optional

   :returns: * **stimTvec** (*Vector*) -- Times at which stimulus is specified.
             * **stimVvec** (*Vector*) -- Amplitudes stimulus takes on.


.. py:function:: make_interface()

   Add extracellular mechanism to join NEURON and xcell.

   :returns: **float[** -- Coordinates of compartment centers in meters.
   :rtype: ,3]


.. py:class:: ThresholdSim(name, xdom, source_amps, source_geometry, sigma=1.0)

   Bases: :py:obj:`xcell.xCell.Simulation`

   .. py:method:: mesh_and_solve(depth)

      Mesh and solve domain with standard xcell meshing parameters.

      :param depth: Max recursion depth
      :type depth: int


   .. py:method:: get_analytic_vals(coords)

      Calculate the analytic voltage due to all point current sources.

      :param coords: Cartesian coordinates at which to calculate potential
      :type coords: float[:,3]

      :returns: **float[** -- Voltage at each point in volts.
      :rtype: ]



.. py:class:: ThresholdStudy(simulation, pulsedur=1.0, biphasic=True, viz=None)

   .. py:method:: _build_neuron()

      Placeholder: Create neural compartments in cells.

      :returns: Cell
      :rtype: cell


   .. py:method:: get_threshold(depth, pmin=0.0, pmax=100.0, analytic=False, strict=True)

      Find activation threshold of electrode/neuron system.

      :param depth: Maximum recursion depth for mesh generation.
      :type depth: int
      :param pmin: Minimum stimulus amplitude, by default 0.
      :type pmin: float, optional
      :param pmax: Maximum stimulus amplitude, by default 1e2
      :type pmax: float, optional
      :param analytic: Use analytic point-source approximation (True)
                       or meshed geometry (False, default)
      :type analytic: bool, optional
      :param strict: Raise exception if neuron is not subthreshold
                     at pmin and superthreshold at pmax; otherwise,
                     return NaN for all values. Default True.
      :type strict: bool, optional

      :returns: * **threshold** (*float*) -- Minimum stimulus amplitude to produce action potential
                * **n_elements** (*int*) -- Element count of mesh
                * **n_sources** (*int*)


   .. py:method:: _run_trial(amplitude, analytic=False)


   .. py:method:: _set_v_ext(analytic=False)



.. py:class:: RecordedCell

   .. py:method:: attach_spike_detector(section)

      Attach spike detector to section.

      :param section: Section to check for spikes.
      :type section: NEURON section

      :rtype: None.


   .. py:method:: attach_membrane_recordings(sections=None)

      Attach recorders for membrane voltage & current.

      :param sections: NEURON sections to record, or all sections
                       if None (default)
      :type sections: NEURON section, optional

      :rtype: None.



