:py:mod:`xcell.colors`
======================

.. py:module:: xcell.colors

.. autoapi-nested-parse::

   Color schemes for xcell.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   xcell.colors.scoop_cmap
   xcell.colors.make_style_dict
   xcell.colors.use_dark_style
   xcell.colors.use_light_style
   xcell.colors.setup_pv_theme
   xcell.colors.recolor_svg



Attributes
~~~~~~~~~~

.. autoapisummary::

   xcell.colors.MESH_ALPHA
   xcell.colors.FAINT
   xcell.colors.CM_BIPOLAR
   xcell.colors.DARK
   xcell.colors.HILITE
   xcell.colors.OFFWHITE
   xcell.colors.NULL
   xcell.colors.WHITE
   xcell.colors.ACCENT_DARK
   xcell.colors.ACCENT_LIGHT
   xcell.colors.BASE
   xcell.colors.BG
   xcell.colors.plx
   xcell.colors.lint
   xcell.colors.CM_MONO
   xcell.colors.scopeColors
   xcell.colors.scopeColorsLite
   xcell.colors.styleScope
   xcell.colors.styleScope2


.. py:data:: MESH_ALPHA
   :value: 0.25

   

.. py:data:: FAINT
   :value: ()

   

.. py:function:: scoop_cmap(baseCmap, fraction=0.1)

   Fades colormap transparency as values approach 0.0.

   :param baseCmap: Colormap to modify.
   :type baseCmap: colormap
   :param fraction: Fraction of colormap range to apply alpha fade. The default is 0.1.
   :type fraction: float, optional

   :returns: **newCmap** -- Modified colormap.
   :rtype: colormap


.. py:data:: CM_BIPOLAR

   

.. py:data:: DARK
   :value: '#19232d'

   

.. py:data:: HILITE
   :value: '#afcfff'

   

.. py:data:: OFFWHITE
   :value: '#dcd4c7'

   

.. py:data:: NULL
   :value: '#00000000'

   

.. py:data:: WHITE
   :value: '#FFFFFF00'

   

.. py:data:: ACCENT_DARK
   :value: '#990000'

   

.. py:data:: ACCENT_LIGHT
   :value: '#FFCC00'

   

.. py:data:: BASE

   

.. py:data:: BG

   

.. py:data:: plx

   

.. py:data:: lint

   

.. py:data:: CM_MONO

   

.. py:data:: scopeColors
   :value: ['#ffff00', '#00ffff', '#990000', '#00ff00', '#ff0000', '#0000ff', '#ff8000', '#8000ff',...

   

.. py:data:: scopeColorsLite
   :value: ['#ffcc00', '#17becf', '#990000', '#2ca02c', '#1c2a99', '#d62728', '#ff7f0e', '#9467bd',...

   

.. py:data:: styleScope

   

.. py:data:: styleScope2

   

.. py:function:: make_style_dict(fgColor, bgColor)

   Generate dictionary of plotting preferences.

   :param fgColor: Color for gridlines, text, etc..
   :type fgColor: color
   :param bgColor: Color for image background.
   :type bgColor: color

   :returns: **styleDict** -- Dict of matplotlib preferences (pass to mpl.style.use()).
   :rtype: dict


.. py:function:: use_dark_style()

   Switch to dark-mode visualizations (suitable for screen).

   :rtype: None.


.. py:function:: use_light_style()

   Switch to light-mode visualizations (suitable for print).

   :rtype: None.


.. py:function:: setup_pv_theme(theme)

   Set PyVista to match current xcell theme.

   :param theme: Built-in theme to use as a starting point
   :type theme: PyVista theme

   :returns: **theme** -- Customized theme
   :rtype: PyVista theme


.. py:function:: recolor_svg(fname, toLight=True)

   Post-process SVG to change color scheme.

   :param fname: File name.
   :type fname: str
   :param toLight: Set conversion direction from dark to light. The default is True.
   :type toLight: bool, optional

   :rtype: None.


