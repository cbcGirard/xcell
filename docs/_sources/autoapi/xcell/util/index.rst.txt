:py:mod:`xcell.util`
====================

.. py:module:: xcell.util

.. autoapi-nested-parse::

   Low-level helpers.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   xcell.util.Logger



Functions
~~~~~~~~~

.. autoapisummary::

   xcell.util.is_scalar
   xcell.util.point_current_source_voltage
   xcell.util.disk_current_source_voltage
   xcell.util.round_to_digit
   xcell.util.logfloor
   xcell.util.logceil
   xcell.util.loground
   xcell.util.make_grid_points
   xcell.util.get_index_dict
   xcell.util.get_py_dict
   xcell.util.renumber_indices
   xcell.util.reindex
   xcell.util.minOver
   xcell.util.maxUnder
   xcell.util.to_bit_array
   xcell.util.from_bit_array
   xcell.util.any_match
   xcell.util.index_to_xyz
   xcell.util.position_to_index
   xcell.util.reduce_functions
   xcell.util.intdot
   xcell.util.get_indices_of_octant
   xcell.util.calc_xyz_within_octant
   xcell.util.indices_to_coordinates
   xcell.util.octant_list_to_xyz
   xcell.util.get_octant_neighbor_lists
   xcell.util.reverse_octant_list_to_xyz
   xcell.util.__xyzToOList
   xcell.util.unravel_array_set
   xcell.util.fastcount



Attributes
~~~~~~~~~~

.. autoapisummary::

   xcell.util.MAXDEPTH
   xcell.util.MAXPT
   xcell.util.OCT_INDEX_BITS


.. py:data:: MAXDEPTH

   

.. py:data:: MAXPT

   

.. py:function:: is_scalar(var)

   Verify var is not a list/array


.. py:function:: point_current_source_voltage(eval_coords, i_source, sigma=1.0, source_location=np.zeros(3, dtype=np.float64))

   Calculate field from point current source.

   :param eval_coords: Points at which to evaluate field.
   :type eval_coords: float[:,3]
   :param i_source: Source current in amperes.
   :type i_source: float
   :param sigma: Local conductivity in S/m. The default is 1..
   :type sigma: float, optional
   :param source_location: Center of source. The default is np.zeros(3, dtype=np.float64).
   :type source_location: float[3], optional

   :returns: **v** -- Potential at specified points.
   :rtype: float[:]


.. py:function:: disk_current_source_voltage(eval_coords, i_source, sigma=1.0, source_location=np.zeros(3, dtype=np.float64))

   Calculate field from a disk current source on planar insulator.

   :param eval_coords: Points at which to evaluate field.
   :type eval_coords: float[:,3]
   :param i_source: Source current in amperes.
   :type i_source: float
   :param sigma: Local conductivity in S/m. The default is 1.0.
   :type sigma: float, optional
   :param source_location: Cartesian coordinates of source center.
                           The default is np.zeros(3, dtype=np.float64).
   :type source_location: float[3], optional

   :returns: **v** -- Potential at specified points.
   :rtype: float[:]

   .. rubric:: Notes

   Analytic expression taken from [1]_.

   .. rubric:: References

   .. [1] J. Newman, “Resistance for Flow of Current to a Disk,”
      J. Electrochem. Soc., vol. 113, no. 5, p. 501, May 1966,
      doi: 10.1149/1.2424003.


.. py:function:: round_to_digit(x)

   Round to one significant digit.

   :param x: number to round.
   :type x: float

   :returns: Rounded number.
   :rtype: float


.. py:function:: logfloor(val)

   Round down to power of 10.

   :param val: Value(s) to round
   :type val: float or float array

   :returns: Rounded value(s)
   :rtype: same as val


.. py:function:: logceil(val)

   Round up to power of 10.

   :param val: Value(s) to round
   :type val: float or float array

   :returns: Rounded value(s)
   :rtype: same as val


.. py:function:: loground(axis, which='both')

   Set plot axes' bounds to powers of 10.

   :param axis: Plot axes to alter.
   :type axis: `matplotlib.axes.Axes`
   :param which: Which axes to change bounds: 'x', 'y', or 'both' (default).
   :type which: str, optional


.. py:function:: make_grid_points(nx, xmax, xmin=None, ymax=None, ymin=None, centers=False)

   Convenience function to make points on xy grid

   :param nx: Number of points per axis.
   :type nx: int
   :param xmax: Largest x coordinate
   :type xmax: float
   :param xmin: Smallest x coordinate, or use -xmax if None (default)
   :type xmin: float, optional
   :param ymax: Largest y coordinate, or use xmax if None (default)
   :type ymax: float, optional
   :param ymin: Smallest y coordinate, or use -xmax if None (default)
   :type ymin: float, optional
   :param centers: Return the center points of the grid instead of the
                   corner vertices, by default False
   :type centers: bool, optional

   :returns: **float[** -- XY coordinates of points on grid.
   :rtype: ,2]


.. py:function:: get_index_dict(sparse_indices)

   Get a dict of subsetIndex: globalIndex.

   :param global_mask: Global elements included in subset.
   :type global_mask: bool array

   :returns: **index_dict** -- Dictionary of subset:global indices.
   :rtype: dict


.. py:function:: get_py_dict(sparse_indices)

   Get dictionary mapping a sparse index number to its position in the list of indices.

   :param sparse_indices: DESCRIPTION.
   :type sparse_indices: int[]

   :returns: **dic** -- Dictionary for A[ii]=n such that dic[n]=ii.
   :rtype: dict


.. py:function:: renumber_indices(sparse_indices, dense_list)

   Renumber indices according to a subset

   :param sparse_indices: Indices to renumber
   :type sparse_indices: int array
   :param dense_list: 1d array of indices to generate order of
   :type dense_list: int[:]

   :returns: Original array with each value replaced by it's position in dense_list
   :rtype: int array


.. py:function:: reindex(sparse_value, dense_list)

   Get position of sparse_value in dense_list, returning as soon as found.

   :param sparse_value: Value to find index of match.
   :type sparse_value: int64
   :param dense_list: List of nonconsecutive indices.
   :type dense_list: int64[:]

   :raises ValueError: Error if sparse_value not found.

   :returns: index where sparse_value occurs in dense_list.
   :rtype: int64


.. py:function:: minOver(target, vals)


.. py:function:: maxUnder(target, vals)


.. py:function:: to_bit_array(val)

   _summary_

   :param val: Integer to convert
   :type val: int

   :returns: Array of lower 3 bits from input
   :rtype: bool[3]


.. py:data:: OCT_INDEX_BITS

   

.. py:function:: from_bit_array(arr)

   Calculate integer value of boolean array

   :param arr: Array x,y,z bit values
   :type arr: bool[:,3]

   :returns: Integer value of bit array
   :rtype: uint64


.. py:function:: any_match(search_array, search_values)

   Rapid search if any matches occur
   (returns immediately at first match).

   :param search_array: Array to seach.
   :type search_array: array
   :param search_values: Values to search array for.
   :type search_values: array

   :returns: Whether match is found.
   :rtype: bool


.. py:function:: index_to_xyz(ndx, nX)

   Convert scalar index to [x,y,z] indices.

   :param ndx: Index to convert.
   :type ndx: uint64
   :param nX: Number of points per axis.
   :type nX: uint64

   :returns: **int64[** -- Integer position along [x,y,z] axes.
   :rtype: ]


.. py:function:: position_to_index(pos, nX)

   Convert [x,y,z] indices to a scalar index

   :param pos: [x,y,z] indices.
   :type pos: int64[:]
   :param nX: Number of points per axis.
   :type nX: int64

   :returns: **newNdx** -- Scalar index equivalent to [x,y,z] triple.
   :rtype: int64


.. py:function:: reduce_functions(l0_function, ref_pts, element_bbox, coefs=None, return_under=True)

   Determine which point-coefficent pairs are not satisfied by the element size.

   :param l0_function: Target element sizes as a function of distance from reference points and their coefficent
   :type l0_function: function
   :param ref_pts: Cartesian coordinates of reference points
   :type ref_pts: float[:,3]
   :param element_bbox: Bounding box in order (-x,-y,-z, x, y, z)
   :type element_bbox: float[6]
   :param coefs: Coefficients per reference point, by default None (Unity coefficent for all points)
   :type coefs: float[:], optional
   :param return_under: Whether to return targets smaller than element (True, default) for splitting,
                        or those larger for pruning (False)
   :type return_under: bool, optional

   :returns: **bool[** -- Which point/coefficent pairs are not satisfied by current element size.
             These should be passed to the child elements, and the rest assumed to be
             satisfied by the children as well.
   :rtype: ]


.. py:function:: intdot(a, b)

   Dot product, guaranteed to maintain uint64 at all times.
   (since np.dot may silently cast to float)

   :param a: First part of dot product
   :type a: int[:,:]
   :param b: Second part of dot product
   :type b: int[:]

   :returns: **uint64[** -- Integer dot product of operands
   :rtype: ]


.. py:function:: get_indices_of_octant(parent_list, relative_position)

   Calculate universal indices of element from list of parents.

   :param parent_list: List of parent octants' indices.
   :type parent_list: int8[:]
   :param relative_position: Offsets of points to return indices for, relative to
                             root node of octant.
   :type relative_position: int8[:,3]

   :returns: **uint64[** -- Universal indices of node
   :rtype: ]


.. py:function:: calc_xyz_within_octant(parent_list, relative_position)

   Calculate the integer xyz triple for points within octant.

   :param parent_list: List of parent octants' indices.
   :type parent_list: int8[:]
   :param relative_position: Offsets of points to return indices for, relative to
                             root node of octant.
   :type relative_position: int8[:,3]

   :returns: **uint64[** -- Universal indices of node
   :rtype: ]


.. py:function:: indices_to_coordinates(indices, origin, span)

   Convert universal indices to Cartesian coordinates

   :param indices: Universal indices to convert.
   :type indices: uint64[:]
   :param origin: Cartesian coordinates of mesh's xyz minimum.
   :type origin: float[3]
   :param span: Length of mesh along xyz coordinates.
   :type span: float[3]

   :returns: **coords** -- Cartesian coordinates of points.
   :rtype: float[:,3]


.. py:function:: octant_list_to_xyz(octant_list)

   Get xyz indices at octant origin.

   :param octant_list: Indices of each parent octant within its parent.
   :type octant_list: int8[:]

   :returns: **XYZ** -- XYZ triple of smallest octant node.
   :rtype: uint64[3]


.. py:function:: get_octant_neighbor_lists(own_index_list)

   Calculate the lists of indices for each neighbor of an octant.

   :param own_index_list: List of parent octants within their parents.
   :type own_index_list: int[:]

   :returns: **neighbor_lists** -- List of parent indices for the 6 neighboring octants.
   :rtype: list of int


.. py:function:: reverse_octant_list_to_xyz(octant_list)

   Get xyz indices at octant origin from reversed parent list.

   :param octant_list: Indices of each parent octant within its parent, in reversed order.
   :type octant_list: int8[:]

   :returns: **XYZ** -- XYZ triple of smallest octant node.
   :rtype: uint64[3]


.. py:function:: __xyzToOList(xyz, depth)


.. py:class:: Logger(step_name, printout=False)

   Monitor timing, memory use, and step progress.

   .. py:method:: logCompletion()

      Log completion of step and prints duration if configured to.

      :rtype: None.



.. py:function:: unravel_array_set(masked_arrays)

   Get all unmasked values as a 1d array

   :param masked_arrays: Data to unravel
   :type masked_arrays: List of masked arrays

   :returns: **numeric[** -- Nonmasked values of all arrays
   :rtype: ]


.. py:function:: fastcount(boolArray)

   Faster equivalent to summing boolean array

   :param array: Logical array.
   :type array: bool[:]

   :returns: number of true elements.
   :rtype: int


