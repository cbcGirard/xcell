:py:mod:`xcell`
===============

.. py:module:: xcell

.. autoapi-nested-parse::

   Main xcell package
   ==================================

   description needed?



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   AAnimation/index.rst
   _version/index.rst
   colors/index.rst
   dummy/index.rst
   elements/index.rst
   fem/index.rst
   geometry/index.rst
   io/index.rst
   meshes/index.rst
   misc/index.rst
   nrnutil/index.rst
   signals/index.rst
   util/index.rst
   visualizers/index.rst
   xCell/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   xcell.Signal
   xcell.Source
   xcell.Simulation
   xcell.Study



Functions
~~~~~~~~~

.. autoapisummary::

   xcell._analytic
   xcell.general_metric
   xcell.get_standard_mesh_params



Attributes
~~~~~~~~~~

.. autoapisummary::

   xcell.ADMITTANCE_EDGES
   xcell._folderstem
   xcell._folder
   xcell.DATA_DIR
   xcell.__version__


.. py:data:: ADMITTANCE_EDGES

   

.. py:class:: Signal(value)

   Base class for time-dependent values.

   .. attribute:: value

      Constant value of signal.

      :type: float

   .. py:property:: value

      Current value of signal

   .. py:method:: get_value_at_time(t)

      Get value of signal at time t.

      :param t: Time to query signal.
      :type t: float

      :returns: Value at time.
      :rtype: float


   .. py:method:: reset()



.. py:class:: Source(value, geom)

   .. py:method:: get_value_at_time(time)


   .. py:method:: __getstate__()


   .. py:method:: __setstate__(state)



.. py:class:: Simulation(name, bbox, print_step_times=False)

   .. py:method:: quick_adaptive_grid(max_depth, coefficent=0.2)

      Make a generic octree mesh where resolution increases near
      current sources.

      :param max_depth: Maximum subdivision depth.
      :type max_depth: int
      :param coefficent: Density term (maximum resolution in whole mesh at 1.0)
      :type coefficent: float

      :rtype: None.


   .. py:method:: make_adaptive_grid(ref_pts, max_depth, min_l0_function, max_l0_function=None, coefs=None, coarsen=True)

      Construct octree mesh.

      :param ref_pts: DESCRIPTION.
      :type ref_pts: float[:,3]
      :param max_depth: Maximum recursion depth.
      :type max_depth: int
      :param min_l0_function: Function to calculate l0. cf :meth:`xcell.general_metric`.
      :type min_l0_function: function
      :param max_l0_function: DESCRIPTION. min_l0_function used if None.
      :type max_l0_function: function, optional
      :param coefs: Coefficents passed to l0 function. The default is None.
      :type coefs: float[:], optional
      :param coarsen: Whether to prune following splits. The default is True.
      :type coarsen: bool, optional

      :returns: **changed** -- Whether adaptation results in a different mesh topology
      :rtype: bool


   .. py:method:: make_uniform_grid(nX, sigma=np.array([1.0, 1.0, 1.0]))

      Fast utility to construct a uniformly spaced mesh of the domain.

      :param nX: Number of elements along each axis
                 (yielding nX**3 total elements).
      :type nX: int
      :param sigma: Global conductivity. The default is np.array([1.,1.,1.]).
      :type sigma: float or float[3], optional

      :rtype: None.


   .. py:method:: start_timing(step_name)

      General call to start timing an execution step.

      :param step_name: Label for the step
      :type step_name: string

      :rtype: None.


   .. py:method:: log_time(logger=None)

      Signals completion of step.

      :param logger: DESCRIPTION. The default is None.
      :type logger: TYPE, optional

      :rtype: None.


   .. py:method:: getMemUsage(print_value=False)

      Get memory usage of simulation.

      :param print_value: Print current memory usage
      :type print_value: boolean, optional

      :returns: **mem** -- Platform-dependent, often kb used.
      :rtype: int


   .. py:method:: print_total_time()

      Print total simulation time


   .. py:method:: get_edge_currents()

      Get currents through each edge of the mesh.

      :returns: * **currents** (*float[:]*) -- Current through edge in amperes; .
                * **edges** (*int[:,:]*) -- Pairs of node (global) node indices corresponding to
                  [start, end] of each current vector.


   .. py:method:: intify_coords(coords=None)

      Expresses coordinates as triplet of positive integers.

      Prevents rounding errors when determining if two points correspond
      to the same mesh node

      :param coords: Coordinates to rescale as integers, or mesh nodes if None.
      :type coords: float[:,:]

      :returns: **int[** -- Mesh nodes as integers.
      :rtype: ,:]


   .. py:method:: _make_table_header()


   .. py:method:: log_table_entry(csvFile, extraCols=None, extraVals=None)

      Log key metrics of simulation as an additional line of a .csv file.

      Custom categories (column headers) and their values can be added
      to the line.

      :param csvFile: File where data is written to.
      :type csvFile: file path
      :param extraCols: Additional categories (column headers). The default is None.
      :type extraCols: string[:], optional
      :param extraVals: Values corresponding to the additional categories.
                        The default is None.
      :type extraVals: numeric[:], optional

      :rtype: None.


   .. py:method:: finalize_mesh(regularize=False, sigma_mesh=None, default_sigma=1.0)

      Prepare mesh for simulation.

      Locks connectivity, sets global node numbering, gets list of
      edges and corresponding conductances from all elements.

      :param regularize: Perform connectivity regularization, by default False
                         Not currently implemented
      :type regularize: bool, optional
      :param sigma_mesh: Mesh defining conductivity values, by default None
      :type sigma_mesh: mesh, optional
      :param default_sigma: Fallback conductivity for elements outside sigma_mesh,
                            by default 1.0.
      :type default_sigma: float, optional


   .. py:method:: apply_transforms()

      Calculate implicitly defined node voltages from explicit ones.

      :rtype: None.


   .. py:method:: add_current_source(value, geometry)

      Add current source to setup.

      :param value: Amplitude of source
      :type value: float or :py:class:`xcell.signals.Signal`
      :param geometry:
      :type geometry: :py:class:`xcell.geometry.Shape`


   .. py:method:: add_voltage_source(value, geometry)

      Add voltage source to setup.

      :param value: Amplitude of source
      :type value: float or :py:class:`xcell.signals.Signal`
      :param geometry:
      :type geometry: :py:class:`xcell.geometry.Shape`


   .. py:method:: insert_sources_in_mesh(snaplength=0.0)

      _summary_

      :param snaplength: Maximum distance allowed between source and mesh node,
                         by default 0.0.
                         Value currently unused.
      :type snaplength: float, optional


   .. py:method:: __nodesInSource(source)


   .. py:method:: set_boundary_nodes(boundary_function=None, expand=False, sigma=1.0)

      Set potential of nodes at simulation boundary.

      Can pass user-defined function to calculate node potential from its
      Cartesian coordinates; otherwise, boundary is grounded.

      :param boundary_function: User-defined potential as function of coords.
                                The default is None.
      :type boundary_function: function, optional
      :param expand: Embed current domain as center of 3x3x3 grid of cubes before
                     assigning boundaries.
      :type expand: bool, optional
      :param sigma: Conductivity to assign the new elements if expand is True.
                    Default is 1.0.
      :type sigma: float, optional

      :rtype: None.


   .. py:method:: solve(iterative=True, tol=1e-12, v_guess=None)

      Directly solve for nodal voltages.

      Computational time grows significantly with simulation size;
      try solve() for faster convergence

      :returns: **voltages** -- Simulated nodal voltages.
      :rtype: float[:]

      .. seealso::

         :obj:`solve`
             conjugate gradient solver


   .. py:method:: get_voltage_at_dof()

      Get the voltage of every degree of freedom.

      :returns: **vDoF** -- Voltages of all degrees of freedom [floating nodes + current sources].
      :rtype: float[:]


   .. py:method:: _select_by_dof(dofNdx)


   .. py:method:: calculate_analytical_voltage(rvec=None)

      Analytical estimate of potential field.

      Calculates estimated potential from sum of piecewise functions

            Vsrc,         r<=rSrc
      v(r)={
            isrc/(4Pi*r)

      If rvec is none, calculates at every node of mesh

      :param rvec: Distances from source to evaluate at. The default is None.
      :type rvec: float[:], optional

      :returns: * **vAna, list of float[** (*]*) -- List (per source) of estimated potentials
                * *intAna, list of float* -- Integral of analytical curve across specified range.


   .. py:method:: estimate_volume_error(basic=False)

      :param basic: DESCRIPTION. The default is False.
      :type basic: TYPE, optional

      :returns: * **elVints** (*TYPE*) -- DESCRIPTION.
                * **elAnaInts** (*TYPE*) -- DESCRIPTION.
                * **elErrInts** (*TYPE*) -- DESCRIPTION.
                * **analyticInt** (*TYPE*) -- DESCRIPTION.


   .. py:method:: calculate_errors(universal_indices=None)

      Estimate error in solution.

      Estimates error between simulated solution assuming point/spherical
      sources in uniform conductivity.

      The normalized error metric approximates the area between the
      analytical solution i/(4*pi*sigma*r) and a linear interpolation
      between the simulated nodal voltages, evaluated across the
      simulation domain

      :param universal_indices: Alternative points at which to evaluate the analytical solution.
                                The default is None.
      :type universal_indices: int[:], optional

      :returns: * **errSummary** (*float*) -- Normalized, overall error metric.
                * **err** (*float[:]*) -- Absolute error estimate at each node (following global node ordering)
                * **vAna** (*float[:]*) -- Estimated potential at each node (following global ordering)
                * **sorter** (*int[:]*) -- Indices to sort globally-ordered array based on the corresponding node's distance from center
                  e.g. erSorted=err[sorter]
                * **r** (*float[:]*) -- distance of each point from source


   .. py:method:: __toDoF(globalIndex)


   .. py:method:: _get_node_types()

      Get an integer per node indicating its role.

      Type indices:
          0: Unknown voltage
          1: Fixed voltage
          2: Fixed current, unknown voltage

      :rtype: None.


   .. py:method:: get_edge_matrix(dedup=True)

      Return conductance matrix across all nodes in mesh.

      :param dedup: Sum parallel conductances. The default is True.
      :type dedup: bool, optional

      :returns: **gAll** -- Conductance matrix, N x N for a mesh of N nodes.
      :rtype: COO sparse matrix


   .. py:method:: count_node_connectivity(deduplicate=False)

      Calculate how many conductances terminate in each node.

      A fully-connected hex node will have 24 edges prior to merging parallel
      conductances; less than this indicates the node is hanging (nonconforming).

      :param deduplicate: Combine parallel conductances before counting, default False
      :type deduplicate: boolean, optional

      :returns: **nConn** -- Number of edges that terminate in each node.
      :rtype: int[:]


   .. py:method:: regularize_mesh()

      Not recommended: attempt to remove nonconforming nodes.

      :rtype: None.


   .. py:method:: _deduplicate_edges()


   .. py:method:: _is_matching_edge(edges, toMatch)


   .. py:method:: _construct_system()

      Construct system of equations GV=b.

      Rows represent each node without a voltage or current
      constraint, followed by an additional row per current
      source.

      :returns: * **G** (*COO sparse matrix*) -- Conductances between degrees of freedom.
                * **b** (*float[:]*) -- Right-hand side of system, representing injected current
                  and contributions of fixed-voltage nodes.


   .. py:method:: get_coordinates_in_order(order_type='mesh', mask_array=None)

      Get mesh node coordinates according to specified ordering scheme.

      :param order_type: 'mesh'       - Sorted by universal index (default)
                         'dof'        - Sorted by unknowns in system of equations
                                        (floating nodes by universal index, then
                                        current-source nodes in order of source)
                         'electrical' - Like mesh, but current-source nodes moved to
                                         end and replaced by source center
      :type order_type: str, optional
      :param mask_array: Use only mesh nodes where index is True, or use all if None
      :type mask_array: bool[:] or None, optional

      :returns: **float[** -- Coordinates in specified ordering scheme, possibly masked.
      :rtype: ,3]


   .. py:method:: get_edges_in_order(order_type='mesh', mask_array=None)

      Get mesh edges with nodes ordered by specified scheme.

      :param order_type: 'mesh'       - Sorted by universal index (default)
                         'dof'        - Sorted by unknowns in system of equations
                                        (floating nodes by universal index, then
                                        current-source nodes in order of source)
                         'electrical' - Like mesh, but current-source nodes moved to
                                         end and replaced by source center
      :type order_type: str, optional
      :param mask_array: Use only mesh nodes where index is True, or use all if None
      :type mask_array: bool[:] or None, optional

      :returns: **int[** -- Edges with indices from specified ordering
      :rtype: ,2]


   .. py:method:: get_mesh_geometry()

      Get node and edge topology from mesh.

      :returns: * **coords** (*float[:,3]*) -- Cartesian coordinates of mesh nodes
                * **edges** (*uint64[:,2]*) -- Indices of endpoints for each edge in mesh


   .. py:method:: interpolate_at_points(coords, elements=None, data=None)

      Interpolate values at specified coordinates.

      :param coords: Coordinates to interpolate ate.
      :type coords: float[:,:]
      :param elements: Elements to search for the proper interpolation. The default is None, which checks all elements.
      :type elements: element list, optional
      :param data: Nodal values used for interpolation. The default is None, which uses node voltages.
      :type data: float[:], optional

      :returns: **vals** -- Interpolated values at the specfied points
      :rtype: float[:]


   .. py:method:: _get_ordering(order_type)

      Get integer tag for each node according to the designated numbering scheme.

      :param order_type: Whether to order by corresponding degree of freedom 'dof'
                         or electrical .
      :type order_type: string

      :returns: **int[** -- Tag for each node.
      :rtype: ]


   .. py:method:: get_elements_in_plane(axis=2, point=0.0)

      Get all elements that intersect a plane orthogonal to the axes.

      .. deprecated
          Use PyVista slicing routines instead for greater
          robustness and flexibility.

      :param axis: DESCRIPTION. The default is 2.
      :type axis: int, optional
      :param point: DESCRIPTION. The default is 0..
      :type point: float, optional

      :returns: * **elements** (*elements*) -- DESCRIPTION.
                * **coords** (*float[:,2]*)
                * **edgePts** (*float[:,2,2]*)


   .. py:method:: _getUniformPlane(axis, point, data)


   .. py:method:: getValuesInPlane(axis=2, point=0.0, data=None)

      Extract values in a plane.

      .. deprecated
          Use PyVista slicing routines instead for greater robustness.

      :param axis: DESCRIPTION. The default is 2.
      :type axis: TYPE, optional
      :param point: DESCRIPTION. The default is 0..
      :type point: TYPE, optional
      :param data: DESCRIPTION. The default is None.
      :type data: TYPE, optional

      :rtype: None.


   .. py:method:: get_universal_points(elements=None)

      Get index and voltage at every universal point in the elements.

      :param elements: Elements to extract points from, or all elements in mesh if
                       None (default)
      :type elements: list of :py:class:`xcell.mesh.Element`, optional

      :returns: * **universal_indices** (*uint64[:]*) -- Universal indices of the elements
                * **universal_voltages** (*float[:]*) -- Voltage at each universal point, interpolated if necessary


   .. py:method:: getCurrentsInPlane(axis=2, point=0.0)

      Get currents through edges within plane.

      .. deprecated
          PyVista routines recommended instead

      :param axis: DESCRIPTION. The default is 2.
      :type axis: TYPE, optional
      :param point: DESCRIPTION. The default is 0..
      :type point: TYPE, optional

      :returns: * **currents** (*TYPE*) -- DESCRIPTION.
                * **currentPts** (*TYPE*) -- DESCRIPTION.
                * **mesh** (*float[:,:,2]*) -- XY coordinates of mesh nodes in plane.



.. py:class:: Study(study_path, bounding_box)

   IO manager for multiple related simulations

   .. py:method:: new_simulation(simName=None, keepMesh=False)

      Create new simulation in study.

      :param simName: Name of new simulation, or auto-increment 'sim%d' if None
                      (default)
      :type simName: string, optional
      :param keepMesh: Retain original mesh instead of regenerating, by default False
      :type keepMesh: bool, optional

      :returns: New simulation
      :rtype: :py:class:`.Simulation`


   .. py:method:: save_mesh(simulation=None)

      Save mesh to file

      :param simulation: Simulation to save, or self.current_sim if None (default)
      :type simulation: `.Simulation`, optional


   .. py:method:: load_mesh(meshnum)

      Reload mesh from file

      :param meshnum: Index of simulation in study
      :type meshnum: int

      :returns: Reloaded mesh
      :rtype: `xcell.meshes.Mesh`


   .. py:method:: log_current_simulation(extraCols=None, extraVals=None)

      Log current simulation stats to csv file.

      :param extraCols: Additional column labels. The default is None.
      :type extraCols: string[:], optional
      :param extraVals: Additional column data. The default is None.
      :type extraVals: [:], optional

      :rtype: None.


   .. py:method:: save_simulation(simulation, baseName=None, addedTags='')

      Save

      :param simulation: _description_
      :type simulation: _type_
      :param baseName: _description_, by default None
      :type baseName: _type_, optional
      :param addedTags: _description_, by default ''
      :type addedTags: str, optional


   .. py:method:: load_simulation(simName)


   .. py:method:: save(obj, fname, ext='.p')


   .. py:method:: load(fname, ext='.p')


   .. py:method:: _get_file_path(name, extension='.p')


   .. py:method:: save_plot(fig, file_name, ext=None)

      Save matplotlib plot in study folder

      :param fig: Figure to save
      :type fig: :py:class:`matplotlib.figure.Figure`
      :param file_name: _description_
      :type file_name: string
      :param ext: File format to use, or save as .png, .svg, and .eps if None
                  (default)
      :type ext: string, optional


   .. py:method:: __makepath(file_name, ext)


   .. py:method:: save_animation(animator, filename)

      Save matplotlib-based animation (not exported movie!) for reuse.

      :param animator: Animator to save.
      :type animator: :py:class:`xcell.visualizers.FigureAnimator`
      :param filename: Name of pickled file.
      :type filename: string

      :rtype: None.


   .. py:method:: save_pv_image(plotter, filename, **kwargs)

      Save PyVista plot to image.

      :param plotter: Active plotter.
      :type plotter: PyVista Plotter
      :param filename: File name, with or without extension.
                       Saves as .pdf if not specified.
      :type filename: str
      :param \*\* kwargs: Options for plotter.show()

      :rtype: None.


   .. py:method:: make_pv_movie(plotter, filename, **kwargs)

      Open movie file for PyVista animation.

      :param plotter: Active plotter.
      :type plotter: PyVista Plotter
      :param filename: File name, with or without extension.
                       Saves as .mp4 if not specified.
      :type filename: str
      :param \*\* kwargs: Options for plotter.open_movie()

      :rtype: None.


   .. py:method:: load_logfile()

      Returns Pandas dataframe of logged runs

      :returns: * **df** (*TYPE*) -- DESCRIPTION.
                * **cats** (*TYPE*) -- DESCRIPTION.


   .. py:method:: get_saved_simulations(filter_categories=None, filter_values=None, group_category=None)

      Get all simulations in study, grouped and filtered as specified.

      :param filter_categories: Categories in dataset to filter by, or use all if None (default)
      :type filter_categories: list of strings, optional
      :param filter_values: Values to match for each filter category. The default is None,
                            which matches all
      :type filter_values: list of any, optional
      :param group_category: Key to group simulations by, or no grouping if None (default)
      :type group_category: string, optional

      :returns: * **fnames** (*list of lists of strings*) -- Simulation filenames matching each filter and group value.
                * **categories** (*list of strings*) -- Unique keys in group_category, or None if ungrouped



.. py:function:: _analytic(rad, V, I, r)


.. py:function:: general_metric(element_bbox, reference_coords, reference_coefficents)

   Standard linear size metric for element.

   :param element_bbox: Element bounding box in xcell order
   :type element_bbox: float[6]
   :param reference_coords: Cartesian coordinates of reference points
   :type reference_coords: float[:,3]
   :param reference_coefficents: Coefficents of distance for each reference point
   :type reference_coefficents: float[:]

   :returns: **l0s** -- Target size according to each reference/coefficent pair
   :rtype: float[:]


.. py:function:: get_standard_mesh_params(sources, mesh_depth, density=0.2)

   Generate default inputs to general metric for given parameters.

   :param sources: Sources providing reference points.
   :type sources: list of xcell sources
   :param mesh_depth: Maximum splitting depth for mesh.
   :type mesh_depth: int
   :param density: Density of mesh (0.0 = maximally sparse, 1.0 = maximally dense).
                   The default is 0.2.
   :type density: float, optional

   :returns: * **source_coords** (*float[:,3]*) -- Coords of reference points.
             * **max_depths** (*int[:]*) -- Maximum depth allowed per point.
             * **coefs** (*float[:]*) -- Coefficents per point.


.. py:data:: _folderstem

   

.. py:data:: _folder

   

.. py:data:: DATA_DIR

   

.. py:data:: __version__

   

