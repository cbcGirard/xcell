:py:mod:`xcell.visualizers`
===========================

.. py:module:: xcell.visualizers

.. autoapi-nested-parse::

   Visualization routines for meshes.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   xcell.visualizers.TimingBar
   xcell.visualizers.FigureAnimator
   xcell.visualizers.SliceSet
   xcell.visualizers.ErrorGraph
   xcell.visualizers.CurrentPlot
   xcell.visualizers.ScaleRange
   xcell.visualizers.SingleSlice
   xcell.visualizers.LogError
   xcell.visualizers.PVScene
   xcell.visualizers.Symlogizer



Functions
~~~~~~~~~

.. autoapisummary::

   xcell.visualizers.engineering_ticks
   xcell.visualizers.make_discrete_colors
   xcell.visualizers.discrete_legend
   xcell.visualizers.format_xy_axis
   xcell.visualizers.undraw_axis
   xcell.visualizers.grouped_scatter
   xcell.visualizers.import_logfile
   xcell.visualizers.plot_study_performance
   xcell.visualizers.import_and_plot_times
   xcell.visualizers._stacked_time_plot
   xcell.visualizers.outsideLegend
   xcell.visualizers.show_3d_edges
   xcell.visualizers.show_3d_nodes
   xcell.visualizers.get_cmap
   xcell.visualizers.new3dPlot
   xcell.visualizers.animated_title
   xcell.visualizers.resample_plane
   xcell.visualizers.show_current_vectors
   xcell.visualizers.show_2d_edges
   xcell.visualizers.paired_bars
   xcell.visualizers.show_source_boundary
   xcell.visualizers._add_inset
   xcell.visualizers.patchwork_image
   xcell.visualizers.show_mesh
   xcell.visualizers.get_planar_edge_points
   xcell.visualizers.hideBorders
   xcell.visualizers.makeSoloColorbar



Attributes
~~~~~~~~~~

.. autoapisummary::

   xcell.visualizers.MAX_LOG_SPAN


.. py:data:: MAX_LOG_SPAN
   :value: 2

   

.. py:function:: engineering_ticks(axis, xunit=None, yunit=None)

   Set axis to use engineering (SI) notation.

   :param axis: Axes to format
   :type axis: :py:class:`matplotlib.axes.Axes`
   :param xunit: Displayed unit for x axis, by default None
   :type xunit: str, optional
   :param yunit: Displayed unit for y axis, by default None
   :type yunit: str, optional


.. py:class:: TimingBar(figure, axis=None, data=None)

   .. py:method:: get_artists(time, step=None)

      Get artists for timing bar at given time

      :param time: Time in seconds to generate bar
      :type time: float
      :param step: Index of timestep stored in .data, by default None
                   (use value of time)
      :type step: int, optional

      :returns: List of artists
      :rtype: list of artists



.. py:function:: make_discrete_colors(values, legend_stem='n=')

   Generate colors for discrete (categorical) data.

   :param values: Non-unique values to be color-coded.
   :type values: array of numeric
   :param legend_stem: Text preceding category values in legend. The default is 'n='.
   :type legend_stem: string, optional

   :returns: * **colors** (*2d array*) -- Colors assigned to each input value.
             * **handles** (:py:class:`matplotlib.patches.Patch`) -- Dummy objects to generate color legend
               [with legend(handles=legEntry)].


.. py:function:: discrete_legend(axis, data, legend_stem='n=', **kwargs)

   Color-code data and generate corresponding legend.

   :param axis: Axes to place legend in.
   :type axis: :py:class:`matplotlib.axes.Axes`
   :param data: Data to be color-coded.
   :type data: numeric
   :param legend_stem: Legend text preceding values. The default is 'n='.
   :type legend_stem: string, optional

   :returns: **colors** -- Color corresponding to value of each data point.
   :rtype: array of colors


.. py:function:: format_xy_axis(axis, bounds=None, symlog=False, lindist=None, axlabels=False, xlabel='X [m]', ylabel='Y [m]')

   Set up axis for planar slices of 3d space.

   :param axis: Axes to format.
   :type axis: :py:class:`matplotlib.axes.Axes`
   :param bounds: Explicit limits for axes, [xmin, xmax, ymin, ymax]. The default is
                  None.
   :type bounds: float[4], optional
   :param symlog: Use symmetric log scales, or linear if None. The default is None.
   :type symlog: bool, optional
   :param lindist: Forces linear scale on (-lindist, lindist)
   :type lindist: float, optional
   :param xlabel: Horizontal axis label. The default is 'X [m]'.
   :type xlabel: string, optional
   :param ylabel: Vertical axis label. The default is 'Y [m]'.
   :type ylabel: string, optional

   :rtype: None.


.. py:function:: undraw_axis(axis)

   Remove contents from axis, preserving scale/labels/ticks.

   :param axis: Axes to clear.
   :type axis: :py:class:`matplotlib.axes.Axes`

   :rtype: None.


.. py:function:: grouped_scatter(fname, x_category, y_category, group_category, df=None, ax=None, **kwargs)

   Plot study summary data from logfile, grouped by category key.

   :param fname: Filename to read from
   :type fname: string
   :param x_category: Key for x-axis quantity
   :type x_category: string
   :param y_category: Key for y-axis quantity
   :type y_category: string
   :param group_category: Key to group simulations by
   :type group_category: string
   :param df: Dataset to query, replaced by contents of fname if None (default)
   :type df: pandas dataframe, optional
   :param ax: Axes to plot on, or create new figure if None (default)
   :type ax: :py:class:`matplotlib.axes.Axes`, optional
   :param \*\*kwargs: Arguments to pass to :py:function:`matplotlib.pyplot.plot`
   :type \*\*kwargs: dict, optional


.. py:function:: import_logfile(fname)

   Import .csv logfile to pandas dataframe

   :param fname: Name of file to read
   :type fname: string

   :returns: * **df** (*pandas dataframe*) -- Imported data
             * **cats** (*strings*) -- Category labels


.. py:function:: plot_study_performance(study, plot_ratios=False, **kwargs)

   Plot breakdown of computational time.

   :param study: Study to analyize
   :type study: `.Study`
   :param plot_ratios: Whether to plot the ratios of CPU to wall time, by default False
   :type plot_ratios: bool, optional

   :returns: **figs** -- Output figures
   :rtype: list of :py:class:`matplotlib.figures.Figure`


.. py:function:: import_and_plot_times(fname, time_type='Wall', ax=None, only_category=None, only_value=None, x_category='Number of elements', **kwargs)

   Generate plots of step duration from study logfile.

   :param fname: Name of logfile to import from
   :type fname: string
   :param time_type: Plot 'Wall' (default) or 'CPU' time
   :type time_type: string, optional
   :param ax: Axes to plot in, or create new figure if None (default)
   :type ax: :py:class:`matplotlib.axes.Axes`, optional
   :param only_category: Category in dataset to filter by, or use all if None (default)
   :type only_category: string, optional
   :param only_value: Plot only simulations whose only_category matches this value, or
                      use all if None (default)
   :type only_value: any, optional
   :param x_category: Category to use for x-axis values, by default 'Number of elements'
   :type x_category: string, optional
   :param \*\*kwargs: Arguments passed to :py:function:`matplotlib.pyplot.plot`
   :type \*\*kwargs: dict, optional

   :returns: Figure and axes objects of plot
   :rtype: (fig, ax)


.. py:function:: _stacked_time_plot(axis, xvals, stepTimes, step_names, **kwargs)


.. py:function:: outsideLegend(axis=None, reverse_order=False, where='right', **kwargs)

   Create legend outside of axes.

   :param axis: Axes to generate legend, or current axes if None (default)
   :type axis: :py:class:`matplotlib.axes.Axes`, optional
   :param reverse_order: Invert order of legend entries, by default False
   :type reverse_order: bool, optional
   :param where: Placement of legend, either 'right' (default) or at bottom
   :type where: str, optional


.. py:function:: show_3d_edges(axis, coords, edge_indices, edge_values=None, colorbar=True, **kwargs)

   Plot 3d view of mesh edges.

   :param axis: Axes to plot within.
   :type axis: :py:class:`matplotlib.axes.Axes`
   :param coords: Cartesian coordinates of mesh nodes
   :type coords: float[:,3]
   :param edge_indices: Array-like where each row contains the two indices of the
                        edge's endpoints.
   :type edge_indices: int[:,2]
   :param edge_values: Value assigned to each edge for coloration, e.g.
                       conductances or current; by default None
   :type edge_values: any, optional
   :param colorbar: Whether to generate a colorbar for the edge data,
                    by default True
   :type colorbar: bool, optional

   :returns: Artist collection for 3d lines
   :rtype: :py:class:`mpl_toolkits.mplot3d.art3d.Line3DCollection`


.. py:function:: show_3d_nodes(axis, coords, node_values, colormap=None, color_norm=None, colors=None, **kwargs)

   Show mesh nodes in 3d.

   :param axis: Axes to plot on.
   :type axis: maplotlib Axes
   :param coords: Cartesian coordinates of points to plot.
   :type coords: float[:,3]
   :param node_values: Values to set node coloring.
   :type node_values: numeric array
   :param colormap: Colormap to use for node coloring.
                    The default is None, which uses :py:function:`.get_cmap`.
   :type colormap: colormap, optional
   :param color_norm: Norm to use for node coloring.
                      The default is None, which uses :py:function:`.get_cmap`.
   :type color_norm: matplotlib Norm, optional
   :param colors: Color to use at each point, overriding colormap.
                  The default is None, which sets colors by colormap and norm.
   :type colors: color-like array, optional

   :returns: **artists** -- Collection of point artists.
   :rtype: :py:class:`matplotlib.collections.PathCollection`


.. py:function:: get_cmap(vals, forceBipolar=False, logscale=False)

   Get appropriate colormap for given continuous data.

   By default, uses plasma if data is mostly all positive
   or negative; otherwise, seismic is used and scaled around
   zero.

   Linear scaling will be used unless logscale=True, in
   which case log/symlog is automatically

   :param vals: Data to be colored.
   :type vals: numeric
   :param forceBipolar: DESCRIPTION. The default is False.
   :type forceBipolar: bool, optional
   :param logscale: DESCRIPTION. The default is False.
   :type logscale: bool, optional

   :returns: * **colormap** (*colormap*) -- Selected colormap.
             * **color_norm** (*matplotlib Norm*) -- Norm function to map data to (0,1) range of colormap.


.. py:function:: new3dPlot(bounding_box=None, *args, fig=None)

   Create 3d axes with equal scaling in x, y, and z.

   :param bounding_box: Bounding box in xcell ordering (-x,-y,-z,+x,...).
                        If None, scale to (-1,+1) (default)
   :type bounding_box: float[6], optional
   :param fig: Figure to create axes in, or make new figure if None (default)
   :type fig: _type_, optional

   :returns: Newly created 3d axes
   :rtype: :py:class:`matplotlib.axes.Axes`

   .. rubric:: Notes

   Based on https://stackoverflow.com/a/13701747


.. py:function:: animated_title(figure, text, axis=None, **kwargs)

   Create animation-ready title.

   :param figure: Figure to place title in (or assign to axis if None)
   :type figure: _type_
   :param text: Text of title
   :type text: string
   :param axis: Axes to title if figure is None, by default None
   :type axis: _type_, optional

   :returns: Title artist
   :rtype: :py:class:`matplotlib.text.Text`


.. py:function:: resample_plane(axis, sim, move_to_center=True, elements=None, data=None)

   Resample simulation data with a uniform planar grid.

   :param axis: Axes to plot within.
   :type axis: :py:class:`matplotlib.axes.Axes`
   :param sim: Simulation to sample data from.
   :type sim: :py:class:`.Simulation`
   :param move_to_center: Whether to sample at center of gridpoints instead of gridpoints
                          proper. Default true.
   :type move_to_center: bool, default True
   :param elements: Elements to sample from, or use entire mesh if None (default).
   :type elements: list of :py:class:`xcell.elements.Element`, default None
   :param data: Value at each mesh point to interpolate from, or use nodal
                voltages if None (default)
   :type data: numeric array-like, default None

   :returns: **float[** -- 2d array of interpolated data for visualization.
   :rtype: ,:]


.. py:function:: show_current_vectors(axis, pts, vecs)

   Plot current vectors in 3d.

   :param axis: Axis to plot on.
   :type axis: axis
   :param pts: Coordinates of vector tails.
   :type pts: float[:,3]
   :param vecs: Current density vectors.
   :type vecs: float[:,3]

   :returns: **art** -- DESCRIPTION.
   :rtype: Quiver


.. py:function:: show_2d_edges(axis, edge_points, edge_colors=None, **kwargs)

   Show mesh edges in a 2d plot.

   :param axis: 2d axis to plot in.
   :type axis: matplotlib axis
   :param edge_points: List of endpoints of each edge.
   :type edge_points: List of pairs of xy coords
   :param edge_colors: List of colors for each edge. The default is None, which uses
                       :py:constant:`xcell.colors.FAINT`.
   :type edge_colors: array-like of color-like, optional
   :param \*\*kwargs: Args passed to :py:class:`matplotlib.collections.LineCollection`
   :type \*\*kwargs: dict, optional

   :returns: **edgeCol** -- Artist for displaying the edges.
   :rtype: :py:class:`matplotlib.collections.LineCollection`


.. py:function:: paired_bars(data1, data2, labels, categories=None, axis=None, aright=None)

   Plot paired bars.

   :param data1: First list of data points
   :type data1: float[:]
   :param data2: Other data set
   :type data2: float[:]
   :param labels: Legend labels for the two data sets
   :type labels: str[:]
   :param categories: X-axis labels, or simply numbered if None (default)
   :type categories: str[:], optional
   :param axis: Axes to plot on, or current if None
   :type axis: Axis
   :param aright: Paired axis for plotting data2 on right-hand scale.
   :type aright: Axis


.. py:function:: show_source_boundary(axes, radius, source_center=np.zeros(2))

   Plot faint ring representing source's boundary.

   :param axes: Axes to plot within
   :type axes: [axis]
   :param radius: Source radius.
   :type radius: float
   :param source_center: Center of source. The default is np.zeros(2).
   :type source_center: float[:], optional

   :rtype: None.


.. py:function:: _add_inset(baseAxis, rInset, xmax, relativeLoc=(0.5, -0.65))

   Create sub-axis for plotting a zoomed-in view of the main axis.

   Plot commands executed in the main axis DO NOT automatically appear
   in inset; to keep them synchronized, use a pattern like

   axes=[mainAx,inset]
   for ax in axes:
       ax.plot_command(...)

   :param baseAxis: Parent axis.
   :type baseAxis: axis
   :param rInset:
                  Size of inset bounds (such that bounding box is
                                        rInset*[-1,1,-1,1])
   :type rInset: float
   :param xmax: Size of parent axis' bounds.
   :type xmax: float
   :param relativeLoc: Placement of inset's center, relative to parent axis.
                       The default is (.5, -.8), which plots
                       directly beneath the main plot.
   :type relativeLoc: TYPE, optional

   :returns: **inset** -- Inset axis.
   :rtype: axis


.. py:function:: patchwork_image(axis, masked_arrays, colormap, color_norm, extent)

   Produce composite image from discrete rectangular regions.

   Shows the actual interpolation structure of adaptive (non-conforming)
   grid

   :param axis: Axis to plot on.
   :type axis: axis
   :param quadBbox: List of [xmin, xmax, ymin, ymax] for each discrete
                    rectangle.
   :type quadBbox: float[:,:]
   :param quadVal: DESCRIPTION.
   :type quadVal: float[:,:]
   :param colormap: Desired colormap for image.
   :type colormap: colormap
   :param color_norm: Desired norm for image.
   :type color_norm: norm

   :returns: **imlist** -- Artists required to tile region.
   :rtype: list of artists


.. py:function:: show_mesh(setup, axis=None)

   Visualize simulation mesh.

   :param setup: Simulation data to plot.
   :type setup: :py:class:`xcell.Simulation`
   :param axis: 3d axes to plot within, or create new if None (default)
   :type axis: _type_, optional

   :returns: 3d axes
   :rtype: _type_


.. py:function:: get_planar_edge_points(coords, edges, normal_axis=2, axis_coordinate=0.0)

   Get edges that lie in the specified plane.

   :param coords: Cartesian coordinates of mesh nodes
   :type coords: float[:,3]
   :param edges: List of indices of endpoints for each edge
   :type edges: int[:,2]
   :param normal_axis: Axis out of (x,y,z) parallel plane normal, by default 2 (z)
   :type normal_axis: int, optional
   :param axis_coordinate: Coordinate of plane along normal, by default 0.0
   :type axis_coordinate: int, optional

   :returns: Edge points, suitable for
             :py:class:`matplotlib.collections.LineCollection`
   :rtype: List of pairs of float[2]


.. py:class:: FigureAnimator(fig, study, prefs=None)

   Base class for matplotlib animations.

   .. attribute:: datasets

      Array of dicts containing plot data.

   .. attribute:: data_category

      Key for which type of data to use for plot.

      :type: str

   .. attribute:: data_scales

      Scaling information for each data type

      :type: dict of `.ScaleRange`

   .. py:method:: __getstate__()


   .. py:method:: __setstate__(state)


   .. py:method:: setup_figure()

      Format figure.


   .. py:method:: add_simulation_data(sim, append=False)

      Extract plottable data from simulation.

      :param sim: Simulation to add data from
      :type sim: _type_
      :param append: Append to internal animation data, by default False
      :type append: bool, optional


   .. py:method:: animate_study(fname=None, artists=None, extra_artists=None, fps=1.0, vector_frames=[])

      _summary_

      :param fname: Name for saved file, or use class name if None (default)
      :type fname: string, optional
      :param artists: List of artists at each frame, or generate artists from
                      self.datasets if None (default)
      :type artists: list of list of artists, optional
      :param extra_artists: Artists for additional frames of animation, by default None
      :type extra_artists: list of list of artists, optional
      :param fps: Framerate of animation, by default 1.0
      :type fps: float, optional
      :param vector_frames: Indices of frames to save snapshots, by default []
      :type vector_frames: list, optional

      :returns: Animated figure
      :rtype: :py:class:`matplotlib.animation.ArtistAnimation`


   .. py:method:: get_study_data(**kwargs)

      Load all data in study.

      :param \*\*kwargs: Arguments passed to :py:method:`xcell.Study.get_saved_simulations`
      :param optional: Arguments passed to :py:method:`xcell.Study.get_saved_simulations`


   .. py:method:: get_artists(setnumberber=0, data=None)

      Get artists corresponding to given data

      :param setnumberber: Frame from self.datasets to use as data, by default 0
      :type setnumberber: int, optional
      :param data: Data to use instead of self.datasets, by default None
      :type data: dict, optional

      :returns: Artists for given data
      :rtype: list of Artists


   .. py:method:: reset_figure()

      Clear all artists from figure.


   .. py:method:: unify_scales(other_scales)

      Update internal data scales with new scales.

      :param other_scales: New data scales to incorporate
      :type other_scales: :py:class:`.ScaleRange`


   .. py:method:: copy(new_figure=None, override_prefs={})

      Create fresh copy of animator with updated preferences.

      :param new_figure: Figure for new animator, or create new figure if None (default)
      :type new_figure: _type_, optional
      :param override_prefs: Preferences to override in copy, by default {}
      :type override_prefs: dict, optional

      :returns: _description_
      :rtype: _type_



.. py:class:: SliceSet(fig, study, prefs=None)

   Bases: :py:obj:`FigureAnimator`

   Base class for matplotlib animations.

   .. attribute:: datasets

      Array of dicts containing plot data.

   .. attribute:: data_category

      Key for which type of data to use for plot.

      :type: str

   .. attribute:: data_scales

      Scaling information for each data type

      :type: dict of `.ScaleRange`

   .. py:method:: __getstate__()


   .. py:method:: setup_figure(resetBounds=False)

      Format figure.


   .. py:method:: add_simulation_data(sim, append=False)

      Extract plottable data from simulation.

      :param sim: Simulation to add data from
      :type sim: _type_
      :param append: Append to internal animation data, by default False
      :type append: bool, optional


   .. py:method:: get_artists(setnumber, data=None)

      Get artists corresponding to given data

      :param setnumberber: Frame from self.datasets to use as data, by default 0
      :type setnumberber: int, optional
      :param data: Data to use instead of self.datasets, by default None
      :type data: dict, optional

      :returns: Artists for given data
      :rtype: list of Artists



.. py:class:: ErrorGraph(fig, study, prefs=None)

   Bases: :py:obj:`FigureAnimator`

   Base class for matplotlib animations.

   .. attribute:: datasets

      Array of dicts containing plot data.

   .. attribute:: data_category

      Key for which type of data to use for plot.

      :type: str

   .. attribute:: data_scales

      Scaling information for each data type

      :type: dict of `.ScaleRange`

   .. py:method:: setup_figure(labelX=True, labelY=True, newAxes=True)

      Format figure.

      :param labelX: Show x label, by default True
      :type labelX: bool, optional
      :param labelY: Show y label, by default True
      :type labelY: bool, optional
      :param newAxes: Generate new axes, by default True (use self.axes otherwise)
      :type newAxes: bool, optional


   .. py:method:: add_simulation_data(sim, append=False)

      Extract plottable data from simulation.

      :param sim: Simulation to add data from
      :type sim: _type_
      :param append: Append to internal animation data, by default False
      :type append: bool, optional


   .. py:method:: get_artists(setnumber, data=None)

      Get artists corresponding to given data

      :param setnumberber: Frame from self.datasets to use as data, by default 0
      :type setnumberber: int, optional
      :param data: Data to use instead of self.datasets, by default None
      :type data: dict, optional

      :returns: Artists for given data
      :rtype: list of Artists



.. py:class:: CurrentPlot(fig, study, fullarrow=False, showInset=True, showAll=False, normal_axis=2, normalCoord=0.0)

   Bases: :py:obj:`FigureAnimator`

   Base class for matplotlib animations.

   .. attribute:: datasets

      Array of dicts containing plot data.

   .. attribute:: data_category

      Key for which type of data to use for plot.

      :type: str

   .. attribute:: data_scales

      Scaling information for each data type

      :type: dict of `.ScaleRange`

   .. py:method:: add_simulation_data(sim, append=False)

      Extract plottable data from simulation.

      :param sim: Simulation to add data from
      :type sim: _type_
      :param append: Append to internal animation data, by default False
      :type append: bool, optional


   .. py:method:: get_artists(setnumber)

      Get artists corresponding to given data

      :param setnumberber: Frame from self.datasets to use as data, by default 0
      :type setnumberber: int, optional
      :param data: Data to use instead of self.datasets, by default None
      :type data: dict, optional

      :returns: Artists for given data
      :rtype: list of Artists



.. py:class:: ScaleRange(vals=None)

   .. py:method:: update(newVals)


   .. py:method:: get(forceBipolar=False, forceSymmetric=False)



.. py:function:: hideBorders(axis, hidex=False)


.. py:class:: SingleSlice(fig, study, timevec=[], tdata=None, datasrc='spaceV', prefs=None)

   Bases: :py:obj:`FigureAnimator`

   Base class for matplotlib animations.

   .. attribute:: datasets

      Array of dicts containing plot data.

   .. attribute:: data_category

      Key for which type of data to use for plot.

      :type: str

   .. attribute:: data_scales

      Scaling information for each data type

      :type: dict of `.ScaleRange`

   .. py:method:: copy(newPrefs=None)

      Create fresh copy of animator with updated preferences.

      :param new_figure: Figure for new animator, or create new figure if None (default)
      :type new_figure: _type_, optional
      :param override_prefs: Preferences to override in copy, by default {}
      :type override_prefs: dict, optional

      :returns: _description_
      :rtype: _type_


   .. py:method:: setup_figure()

      Format figure.


   .. py:method:: get_artists(setnumber, data=None)

      Get artists corresponding to given data

      :param setnumberber: Frame from self.datasets to use as data, by default 0
      :type setnumberber: int, optional
      :param data: Data to use instead of self.datasets, by default None
      :type data: dict, optional

      :returns: Artists for given data
      :rtype: list of Artists


   .. py:method:: add_simulation_data(sim, append=False)

      Extract plottable data from simulation.

      :param sim: Simulation to add data from
      :type sim: _type_
      :param append: Append to internal animation data, by default False
      :type append: bool, optional


   .. py:method:: animate_study(fname=None, artists=None, fps=30.0, vector_frames=[], unitStr=None)

      _summary_

      :param fname: Name for saved file, or use class name if None (default)
      :type fname: string, optional
      :param artists: List of artists at each frame, or generate artists from
                      self.datasets if None (default)
      :type artists: list of list of artists, optional
      :param extra_artists: Artists for additional frames of animation, by default None
      :type extra_artists: list of list of artists, optional
      :param fps: Framerate of animation, by default 1.0
      :type fps: float, optional
      :param vector_frames: Indices of frames to save snapshots, by default []
      :type vector_frames: list, optional

      :returns: Animated figure
      :rtype: :py:class:`matplotlib.animation.ArtistAnimation`


   .. py:method:: solobar(fname, unit=None)



.. py:function:: makeSoloColorbar(data, cmap=None, norm=None, unit=None, **kwargs)


.. py:class:: LogError(fig, study, prefs=None)

   Bases: :py:obj:`FigureAnimator`

   Base class for matplotlib animations.

   .. attribute:: datasets

      Array of dicts containing plot data.

   .. attribute:: data_category

      Key for which type of data to use for plot.

      :type: str

   .. attribute:: data_scales

      Scaling information for each data type

      :type: dict of `.ScaleRange`

   .. py:method:: add_simulation_data(sim, append=False)

      Extract plottable data from simulation.

      :param sim: Simulation to add data from
      :type sim: _type_
      :param append: Append to internal animation data, by default False
      :type append: bool, optional


   .. py:method:: get_artists(setnumber, data=None)

      Get artists corresponding to given data

      :param setnumberber: Frame from self.datasets to use as data, by default 0
      :type setnumberber: int, optional
      :param data: Data to use instead of self.datasets, by default None
      :type data: dict, optional

      :returns: Artists for given data
      :rtype: list of Artists



.. py:class:: PVScene(study=None, time=None, **kwargs)

   Bases: :py:obj:`pyvista.Plotter`

   .. py:method:: setTime(time)


   .. py:method:: setup(regions, mesh=None, simData=None, **meshkwargs)


   .. py:method:: planeview(planeBox, scale=1.0, normal='z')


   .. py:method:: clear()


   .. py:method:: close(**kwargs)


   .. py:method:: add_symlog(mesh, data=None, **kwargs)


   .. py:method:: show_edges(mesh)


   .. py:method:: add_mesh(mesh, **kwargs)


   .. py:method:: save_graphic(filename, **kwargs)



.. py:class:: Symlogizer(valRange, linrange=0.1)

   .. py:method:: change_data(newData)



