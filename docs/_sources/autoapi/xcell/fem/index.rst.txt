:py:mod:`xcell.fem`
===================

.. py:module:: xcell.fem

.. autoapi-nested-parse::

   Mathematics for discrete conductivities within elements.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   xcell.fem.get_hex_conductances
   xcell.fem._gen_hex_indices
   xcell.fem.get_face_conductances
   xcell.fem._gen_face_indices
   xcell.fem.get_tet_conductance
   xcell.fem._gen_tet_indices
   xcell.fem._get_admittance_conductances
   xcell.fem._gen_admittance_indices
   xcell.fem.interpolate_from_face
   xcell.fem.interpolate_from_verts
   xcell.fem.integrate_from_verts
   xcell.fem.to_local_coords
   xcell.fem._to_trilinear_coefficent_order
   xcell.fem.__toFaceCoefOrder



Attributes
~~~~~~~~~~

.. autoapisummary::

   xcell.fem.ADMITTANCE_EDGES
   xcell.fem.TET_EDGES
   xcell.fem.FACE_EDGES
   xcell.fem.HEX_EDGES
   xcell.fem.HEX_VERTEX_COORDS
   xcell.fem.HEX_FACE_COORDS
   xcell.fem.HEX_POINT_INDICES
   xcell.fem._TRILIN_INVERSE_MATRIX
   xcell.fem._TRIPOLAR_INVERSE_MATRIX


.. py:function:: get_hex_conductances(span, sigma)

   Calculate the conductances of a trilinear FEM hexahedron.

   :param span: Size of element along each axis
   :type span: float[3]
   :param sigma: Conductivity of element
   :type sigma: float[3] or float

   :returns: **g** -- Conductances of element between each nodal pair in :py:const:`HEX_EDGES`
   :rtype: float[28]


.. py:function:: _gen_hex_indices()

   Generate indices of conductance nodes for trilinear FEM hexahedron.

   :returns: Edges within the hex
   :rtype: int64[28,2]


.. py:function:: get_face_conductances(span, sigma)

   Calculate the conductances of a mesh-dual (face-oriented) hexahedron.

   :param span: Size of element along each axis
   :type span: float[3]
   :param sigma: Conductivity of element
   :type sigma: float[3] or float

   :returns: Conductances, in order of :py:const:`FACE_EDGES`{-x, +x, -y, +y, ...}.
   :rtype: float[6]


.. py:function:: _gen_face_indices()


.. py:function:: get_tet_conductance(pts)

   Calculate conductances between nodes of tetrahedron.

   :param pts: Cartesian coordinates of tet vertices
   :type pts: float[4,3]

   :returns: Conductances between vertices in order of :py:const:`TET_EDGES`
   :rtype: float[4]


.. py:function:: _gen_tet_indices()


.. py:function:: _get_admittance_conductances(span, sigma)


.. py:function:: _gen_admittance_indices()


.. py:data:: ADMITTANCE_EDGES

   

.. py:data:: TET_EDGES

   

.. py:data:: FACE_EDGES

   

.. py:data:: HEX_EDGES

   

.. py:function:: interpolate_from_face(faceValues, localCoords)

   Interpolate within the cuboid from values on the faces.

   :param faceValues: Known values at each face.
   :type faceValues: float[:]
   :param localCoords: Cartesian coordinates at which to interpolate.
   :type localCoords: float[:,3]

   :returns: **float[** -- Interpolated values.
   :rtype: ]


.. py:function:: interpolate_from_verts(vertexValues, localCoords)

   Interpolate within the element from values on the vertices (i.e. trilinear interpolation).

   :param vertexValues: Known values at each vertex.
   :type vertexValues: float[:]
   :param localCoords: Cartesian coordinates at which to interpolate.
   :type localCoords: float[:,3]

   :returns: **float[** -- Interpolated values.
   :rtype: ]


.. py:function:: integrate_from_verts(vertexValues, span)

   Integrate values on the cube assuming trilinear interpolation.

   :param vertexValues: Values at vertices
   :type vertexValues: float[:]
   :param span: Length of cube in x,y,z directions
   :type span: float[3]

   :returns: Integral of input values over the cube's volume.
   :rtype: float


.. py:function:: to_local_coords(global_coords, center, span)

   Transform global Cartesian coordinates to an element's local coordinate system (-1,1,-1...).

   :param global_coords: Global cartesian coordinates
   :type global_coords: float[:,3]
   :param center: Center of cube in global coordinates.
   :type center: float[3]
   :param span: Length of cube in x,y,z.
   :type span: float[3]

   :returns: **float[** -- Points denoted in the element's local coordinate system.
   :rtype: ,3]


.. py:function:: _to_trilinear_coefficent_order(coords)


.. py:function:: __toFaceCoefOrder(coords)


.. py:data:: HEX_VERTEX_COORDS

   

.. py:data:: HEX_FACE_COORDS

   

.. py:data:: HEX_POINT_INDICES

   

.. py:data:: _TRILIN_INVERSE_MATRIX

   

.. py:data:: _TRIPOLAR_INVERSE_MATRIX

   

